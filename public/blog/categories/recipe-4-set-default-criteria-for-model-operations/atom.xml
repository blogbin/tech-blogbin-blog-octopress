<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Recipe 4 Set Default Criteria for Model Operations | Tech.Blogbin's Blog]]></title>
  <link href="http://tech-blog.blogbin.info/blog/categories/recipe-4-set-default-criteria-for-model-operations/atom.xml" rel="self"/>
  <link href="http://tech-blog.blogbin.info/"/>
  <updated>2013-02-28T00:17:30+08:00</updated>
  <id>http://tech-blog.blogbin.info/</id>
  <author>
    <name><![CDATA[Tech Blogbin ]]></name>
    <email><![CDATA[Tech Blogbin <tech.blogbin@gmail.com>]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Recipes Rails 3 Edition Recipe 4 Set Default Criteria for Model Operations]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/10/07/rails-recipes-rails-3-edition-recipe-4-set-default-criteria-for-model-operations/"/>
    <updated>2012-10-07T00:13:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/10/07/rails-recipes-rails-3-edition-recipe-4-set-default-criteria-for-model-operations</id>
    <content type="html"><![CDATA[<p>使用 default_scope 来设定 ActiveRecord 模型的默认查询条件。</p>

<p>先看一下之前用 scope 来实现的效果：
<blockquote><p>set default criteria for model operations using Active Record’s<br/>default_scope() method.</p></p><p><p>``` ruby rr2/default_scopes/app/models/product_first.rb<br/>class Product &lt; ActiveRecord::Base</p></p><p><pre><code>scope :available, where(:available =&gt; true)<br/></code></pre></p><p><p>end<br/>```</p></p><p><!--more--></p><p><br/><p>``` ruby</p></p><p><blockquote><p>Product.count<br/>=> 6<br/>Product.available.count<br/>=> 4<br/>Product.available.map(&amp;:name)<br/>=> ["Furbie",<br/>"Godzilla",<br/>"Mr. Bill",<br/>"Cat Lady Action Figure"]<br/>Product.available.find_by_name("Godzilla")<br/>=> #<Product id: 2, name: "Godzilla", ...><br/>```</p></blockquote>
每次都要调用一串 scope 定义的类方法，没有 DRY 。</p></blockquote>

<p>重构用 default_scope 的效果：
<blockquote><p>``` ruby rr2/default_scopes/app/models/product.rb<br/>class Product &lt; ActiveRecord::Base</p></p><p><pre><code>default_scope :available, where(:available =&gt; true)<br/></code></pre></p><p><p>end<br/>```</p></p><p><p>``` ruby</p></p><p><blockquote><p>Product.all.map &amp;:available<br/>=> [true, true, true, true, true]<br/>Product.connection.execute("select count(<em>) from products")<br/>=> [{"count(</em>)"=>11, 0=>11}]<br/>lb = Product.create(:name => "Liquid Brains",<br/>:price => 19.74)<br/>=> #<Product id: 12, ... updated_at: "2010-11-04 23:34:49"><br/>lb.available?<br/>=> true<br/>```</p></blockquote></p></blockquote>

<p>注意 default_scope 只影响默认查询条件，不会影响 create, new 等方法。如：
<blockquote><p>``` ruby</p></p><p><blockquote><p>Product.create(:name => "Hideous Harvey",<br/>:price => 2.99,<br/>:available => false)<br/>=> #<Product id: 13, name: "Hideous Harvey" ... ><br/>Product.find_by_id(13)<br/>=> nil<br/>Product.unscoped { Product.find_by_id(13) }<br/>=> #<Product id: 13, name: "Hideous Harvey" ...><br/>```<br/>When we created the Product, this time we passed in an explicit value for the<br/>available attribute. The default scope’s value doesn’t apply if you override it<br/>explicitly. On our first attempt to find the record we just created, the query<br/>responds as if the record doesn’t exist. When we bypass the default scope<br/>with the unscoped() method, the record is returned.</p></blockquote></p></blockquote>

<p>使用 default_scope 可能会给其他人带来困扰。需要把握平衡。
<blockquote><p>Without reading through your models, another programmer won’t know that<br/>a default scope is implied.<br/>use default scopes is a trade-off between convenience<br/>and transparency.</p></blockquote></p>
]]></content>
  </entry>
  
</feed>
