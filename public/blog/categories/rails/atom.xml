<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Tech.Blogbin's Blog]]></title>
  <link href="http://tech-blog.blogbin.info/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://tech-blog.blogbin.info/"/>
  <updated>2012-10-07T00:24:33+08:00</updated>
  <id>http://tech-blog.blogbin.info/</id>
  <author>
    <name><![CDATA[Tech Blogbin ]]></name>
    <email><![CDATA[Tech Blogbin <tech.blogbin@gmail.com>]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Recipes Rails 3 Edition Recipe 4 Set Default Criteria for Model Operations]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/10/07/rails-recipes-rails-3-edition-recipe-4-set-default-criteria-for-model-operations/"/>
    <updated>2012-10-07T00:13:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/10/07/rails-recipes-rails-3-edition-recipe-4-set-default-criteria-for-model-operations</id>
    <content type="html"><![CDATA[<p>使用 default_scope 来设定 ActiveRecord 模型的默认查询条件。</p>

<p>先看一下之前用 scope 来实现的效果：
<blockquote><p>set default criteria for model operations using Active Record’s<br/>default_scope() method.</p></p><p><p>``` ruby rr2/default_scopes/app/models/product_first.rb<br/>class Product &lt; ActiveRecord::Base</p></p><p><pre><code>scope :available, where(:available =&gt; true)<br/></code></pre></p><p><p>end<br/>```</p></p><p><!--more--></p><p><br/><p>``` ruby</p></p><p><blockquote><p>Product.count<br/>=> 6<br/>Product.available.count<br/>=> 4<br/>Product.available.map(&amp;:name)<br/>=> ["Furbie",<br/>"Godzilla",<br/>"Mr. Bill",<br/>"Cat Lady Action Figure"]<br/>Product.available.find_by_name("Godzilla")<br/>=> #<Product id: 2, name: "Godzilla", ...><br/>```</p></blockquote>
每次都要调用一串 scope 定义的类方法，没有 DRY 。</p></blockquote>

<p>重构用 default_scope 的效果：
<blockquote><p>``` ruby rr2/default_scopes/app/models/product.rb<br/>class Product &lt; ActiveRecord::Base</p></p><p><pre><code>default_scope :available, where(:available =&gt; true)<br/></code></pre></p><p><p>end<br/>```</p></p><p><p>``` ruby</p></p><p><blockquote><p>Product.all.map &amp;:available<br/>=> [true, true, true, true, true]<br/>Product.connection.execute("select count(<em>) from products")<br/>=> [{"count(</em>)"=>11, 0=>11}]<br/>lb = Product.create(:name => "Liquid Brains",<br/>:price => 19.74)<br/>=> #<Product id: 12, ... updated_at: "2010-11-04 23:34:49"><br/>lb.available?<br/>=> true<br/>```</p></blockquote></p></blockquote>

<p>注意 default_scope 只影响默认查询条件，不会影响 create, new 等方法。如：
<blockquote><p>``` ruby</p></p><p><blockquote><p>Product.create(:name => "Hideous Harvey",<br/>:price => 2.99,<br/>:available => false)<br/>=> #<Product id: 13, name: "Hideous Harvey" ... ><br/>Product.find_by_id(13)<br/>=> nil<br/>Product.unscoped { Product.find_by_id(13) }<br/>=> #<Product id: 13, name: "Hideous Harvey" ...><br/>```<br/>When we created the Product, this time we passed in an explicit value for the<br/>available attribute. The default scope’s value doesn’t apply if you override it<br/>explicitly. On our first attempt to find the record we just created, the query<br/>responds as if the record doesn’t exist. When we bypass the default scope<br/>with the unscoped() method, the record is returned.</p></blockquote></p></blockquote>

<p>使用 default_scope 可能会给其他人带来困扰。需要把握平衡。
<blockquote><p>Without reading through your models, another programmer won’t know that<br/>a default scope is implied.<br/>use default scopes is a trade-off between convenience<br/>and transparency.</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Recipes Rails 3 Edition Recipe 3 Connect to Multiple Databases]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/10/06/rails-recipes-rails-3-edition-recipe-3-connect-to-multiple-databases/"/>
    <updated>2012-10-06T19:58:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/10/06/rails-recipes-rails-3-edition-recipe-3-connect-to-multiple-databases</id>
    <content type="html"><![CDATA[<p>Rails 项目中同时连接多个数据库的办法。</p>

<p>Rails 项目启动时, ActiveRecord::Railtie 调用 ActiveRecord::Base 的 establish_connection 方法来初始化数据库连接。
<blockquote><p>In Rails 3 and newer, this process<br/>does its work by delegating to each subframework of Rails and asking that<br/>subframework to initialize itself. Each of these initializers is called a Railtie.<br/>Active Record defines ActiveRecord::Railtie to play the initialization role. One of<br/>its jobs is to initialize database connections.</p></p><p><p>So, in the default case, all your models get access to this default connection.<br/>If you make a connection from one of your model classes (by calling establish_connection()),<br/>that connection is available from that class and any of its children<br/>but not from its superclasses, including ActiveRecord::Base.</p></p><p><p>When asked for its connection, the behavior of a model is to start with the<br/>exact class the request is made from and work its way up the inheritance<br/>hierarchy until it finds a connection. This is a key point in working with<br/>multiple databases. A model’s connection applies to that model and any of<br/>its children in the hierarchy unless overridden.</p></blockquote></p>

<!--more-->


<p>通过调用 establish_connection 方法来连接外部数据库
<blockquote><p>``` ruby rr2/multiple_dbs/app/models/plain_product.rb<br/>class Product &lt; ActiveRecord::Base</p></p><p><pre><code>establish_connection :products  <br/></code></pre></p><p><p>end<br/>```</p></blockquote></p>

<p>建议为外部数据库的数据，提供对应的本地映射表和模型。如果可能，保持本地映射表和模型只读状态。
<blockquote><p>we’ll create a mapping table in our<br/>application’s default database (the same one the cart table exists in):<br/>``` ruby rr2/multiple_dbs/db/migrate/20101128145152_create_product_references.rb<br/>class CreateProductReferences &lt; ActiveRecord::Migration</p></p><p><pre><code>def self.up<br/>    create_table :product_references do |t|<br/>    t.integer :product_id<br/>    t.timestamps<br/>    end<br/>end<br/>def self.down<br/>    drop_table :product_references<br/>end<br/></code></pre></p><p><p>end<br/>```<br/>This table’s sole purpose is to provide a local reference to a product. The<br/>product’s id will be stored in the product reference’s product_id field.</p></blockquote></p>

<p>可以创建一个专门连接其它数据库的模型类（抽象的，不需要对应数据表），并创建相应的子类。
<blockquote><p>``` ruby rr2/multiple_dbs/app/models/external.rb<br/>class External &lt; ActiveRecord::Base</p></p><p><pre><code>self.abstract_class = true<br/>establish_connection :products<br/></code></pre></p><p><p>end<br/>```</p></p><p><p><code>ruby ConnectingToMultipleDatabases/app/models/product.rb<br/>class Product &lt; External<br/>end<br/></code></p></p><p><p><code>ruby rr2/multiple_dbs/app/models/tax_conversion.rb<br/>class TaxConversion &lt; External<br/>end<br/></code></p></blockquote></p>

<p>访问其它数据库的另外方法：
<blockquote><p>If you have to continue using an external database, you might consider<br/>exposing that data as a REST service, allowing access only via HTTP calls as<br/>Connect to Multiple Databases<br/>opposed to direct database access. For read-only feeds of data that need to<br/>participate in complex joins, consider replicating the data from its source<br/>table to the databases that need to use it.</p></blockquote></p>

<p>exposing that data as a REST service，可以使用 Rails 提供的 ActiveResouce。可参阅：</p>

<p><a href="http://api.rubyonrails.org/classes/ActiveResource/Base.html">http://api.rubyonrails.org/classes/ActiveResource/Base.html</a></p>

<p><a href="https://github.com/rails/activeresource">https://github.com/rails/activeresource</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Recipes Rails 3 Edition Recipe 2 Create Declarative Named Queries]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/10/06/rails-recipes-rails-3-edition-recipe-2-create-declarative-named-queries/"/>
    <updated>2012-10-06T17:12:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/10/06/rails-recipes-rails-3-edition-recipe-2-create-declarative-named-queries</id>
    <content type="html"><![CDATA[<p>ActiveRecord Scope 是定义查询相关类方法的一种快捷方式。</p>

<p>以下代码，模型查询或业务逻辑代码暴露在 controller
<blockquote><p>``` ruby rr2/declarative_scopes/app/controllers/wombats_controller.rb<br/>class WombatsController &lt; ApplicationController</p></p><p><pre><code>def search<br/>    @wombats = Wombat.where("bio like ?", "%#{params[:q]}%").<br/>    order(:age)<br/>    render :index<br/>end<br/></code></pre></p><p><p>end<br/>```</p></blockquote></p>

<p>重构将模型查询或业务逻辑代码封装在 model 类中，如：</p>

<!--more-->


<p><blockquote><p>``` ruby rr2/declarative_scopes/app/controllers/wombats_controller.rb<br/>def search</p></p><p><pre><code>@wombats = Wombat.with_bio_containing(params[:q])<br/>render :index<br/></code></pre></p><p><p>end<br/>```</p></p><p><p>```  ruby rr2/declarative_scopes/app/models/wombat.rb<br/>class Wombat &lt; ActiveRecord::Base</p></p><p><pre><code>def self.with_bio_containing(query)<br/>    where("bio like ?", "%#{query}%").<br/>    order(:age)<br/>end<br/></code></pre></p><p><p>end<br/>```</p></blockquote></p>

<p>改用 scope 来定义与查询相关的方法，如
<blockquote><p>``` ruby rr2/declarative_scopes/app/models/wombat.rb<br/>class Wombat &lt; ActiveRecord::Base</p></p><p><pre><code>scope :with_bio_containing, lambda {|query| where("bio like ?", "%#{query}%").<br/>order(:age) }<br/></code></pre></p><p><p>end<br/>```</p></blockquote></p>

<p>scope 方法返回 ActiveRecord::Relation，采用延迟加载的方式。
<blockquote><p>You see here that a call to our teenagers() scope actually returns an instance<br/>of ActiveRecord::Relation, not an Array of Person objects! We can ask an ActiveRecord::Relation<br/>to convert itself to SQL with the to_sql() method. If we combine two scopes,<br/>you see that the ActiveRecord::Relation objects actually combine to generate one<br/>composed query.</p></blockquote></p>

<p>更多 ActiveRecord Scope 信息参见：
<a href="http://guides.rubyonrails.org/active_record_querying.html#scopes">http://guides.rubyonrails.org/active_record_querying.html#scopes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Recipes Rails 3 Edition Recipe 1 Create Meaningful Many-to-Many Relationships]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/10/03/rails-recipes-rails-3-edition-recipe-1-create-meaningful-many-to-many-relationships/"/>
    <updated>2012-10-03T23:50:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/10/03/rails-recipes-rails-3-edition-recipe-1-create-meaningful-many-to-many-relationships</id>
    <content type="html"><![CDATA[<h4>关联模型</h4>

<p>Rails 中 ActiveRecord 两个模型之间的多对多关系很少简单用 has_and_belong_to_many 来表示，而是引入第三个模型（关联模型），将之前 A 和 B 的多对多关系，拆分为 A 和 C 的一对多，
B 和 C 的一对多。引入新的关联模型 C ，很容易在 A 和 B 关系上定义一些属性。</p>

<!--more-->


<p><blockquote><p>When modeling many-to-many relationships in Rails, many newcomers<br/>assume they should use the has_and_belongs_to_many() (habtm) macro with its<br/>associated join table. For years, application developers have been creating<br/>strangely named join tables in order to simply connect two tables. But habtm<br/>is best suited to relationships that have no attributes or meaning of their own.<br/>And, given some thought, almost every relationship in a Rails model deserves<br/>its own name to represent its function in the domain being modeled.</p></p><p><p>The idea with join models is that if your many-to-many relationship needs to have some richness<br/>in the association, instead of putting a simple, dumb join table in the middle<br/>of the relationship,</p></blockquote></p>

<p>migrate 创建 关联表（just simply connect two tables） 可以不需要定义 id 主键
``` ruby rr2/many_to_many/beginning_schema.rb
create_table :magazines_readers, :id => false do |t|</p>

<pre><code>t.integer :magazine_id
t.integer :reader_id
</code></pre>

<p>end
```
参阅：
<blockquote><p>By default, create_table will create a primary key called id. You can change the name of the primary key with the :primary_key option (don’t forget to update the corresponding model) or, if you don’t want a primary key at all (for example for a HABTM join table), you can pass the option :id => false. If you need to pass database specific options you can place an SQL fragment in the :options option. For example,</p></p><p><p>create_table :products, :options => "ENGINE=BLACKHOLE" do |t|<br/>  t.string :name, :null => false<br/>end<br/>will append ENGINE=BLACKHOLE to the SQL statement used to create the table (when using MySQL, the default is ENGINE=InnoDB).</p></blockquote>
<a href="http://guides.rubyonrails.org/migrations.html#creating-a-table">http://guides.rubyonrails.org/migrations.html#creating-a-table</a></p>

<h4>多个 has_many</h4>

<p>一个 Association 可以根据需要定义不同的 has_many，如：
``` ruby ManyToManyWithAttributesOnTheRelationship/app/models/magazine.rb
class Magazine &lt; ActiveRecord::Base</p>

<pre><code>has_many :subscriptions
has_many :readers, :through =&gt; :subscriptions
has_many :semiannual_subscribers,
    :through =&gt; :subscriptions,
    :source =&gt; :reader,
    :conditions =&gt; ['length_in_issues = 6']
</code></pre>

<p>end
```</p>

<h4>has_many 中 :calss 和 :source 的区别</h4>

<p>无法通过 has_many 的一个参数自动推断出 Rails ActiveRecord 模型名称时，如果 has_many 如果使用 :through ，需要设置 :source 参数，否者使用 :calss_name 参数。
<blockquote><p>```<br/>class Relationship &lt; ActiveRecord::Base<br/>  belongs_to :user,</p></p><p><pre><code>:class_name =&gt; 'User', :foreign_key =&gt; 'user_id'<br/></code></pre></p><p><p>  belongs_to :buddy,</p></p><p><pre><code>:class_name =&gt; 'User', :foreign_key =&gt; 'buddy_id'<br/></code></pre></p><p><p>end<br/>class User &lt; ActiveRecord::Base<br/>  has_many :relations_to,</p></p><p><pre><code>:foreign_key =&gt; 'user_id',  :class_name =&gt; 'Relationship'<br/></code></pre></p><p><p>  has_many :relations_from,</p></p><p><pre><code>:foreign_key =&gt; 'buddy_id', :class_name =&gt; 'Relationship'                             <br/></code></pre></p><p><p>  has_many :linked_to,</p></p><p><pre><code>:through =&gt; :relations_to,   :source =&gt; :buddy<br/></code></pre></p><p><p>  has_many :linked_from,</p></p><p><pre><code>:through =&gt; :relations_from, :source =&gt; :user<br/></code></pre></p><p><p>end<br/>```</p></blockquote>
参阅：</p>

<p><a href="http://stackoverflow.com/questions/4632408/need-help-to-understand-source-option-of-has-one-has-many-through-of-rails">http://stackoverflow.com/questions/4632408/need-help-to-understand-source-option-of-has-one-has-many-through-of-rails</a></p>

<p><a href="http://hlee.iteye.com/blog/1254723">http://hlee.iteye.com/blog/1254723</a></p>

<h4>更多关于 has_many 和 :through 信息参阅：</h4>

<p>[http://guides.rubyonrails.org/association_basics.html#the-has_many-association](http://guides.rubyonrails.org/association_basics.html#the-has_many-association</p>

<p><a href="http://guides.rubyonrails.org/association_basics.html#the-has_many-through-association">http://guides.rubyonrails.org/association_basics.html#the-has_many-through-association</a></p>

<p><a href="http://guides.rubyonrails.org/association_basics.html#has_many-association-reference">http://guides.rubyonrails.org/association_basics.html#has_many-association-reference</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Could not find gem 'rails (= 3.2.8) ruby' in the gems available on this machine.]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/09/15/could-not-find-gem-rails-equals-3-dot-2-8-ruby-in-the-gems-available-on-this-machine/"/>
    <updated>2012-09-15T22:47:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/09/15/could-not-find-gem-rails-equals-3-dot-2-8-ruby-in-the-gems-available-on-this-machine</id>
    <content type="html"><![CDATA[<p>之前 Rails 项目的 Rails 版本升级到 3.2.8。在 Centos 6.x 和 MacOS 都比较顺利。</p>

<p>但有同事反馈 Ubuntu 12.x + RVM + Gemset 方式无法遇到麻烦，不管是执行 bundle install or gem install
```
liwy@ubuntu:~/.rvm/gems/ruby-1.9.3-p125/cache$ bundle install
Could not find gem 'rails (= 3.2.8) ruby' in the gems available on this machine.</p>

<p>liwy@ubuntu:~/.rvm/gems/ruby-1.9.3-p125/cache$ gem install rails -v 3.2.8
Could not find gem 'rails (= 3.2.8) ruby' in the gems available on this machine.
```</p>

<p>后来同事反馈，删除掉 rvm cache 的 <em>specs</em>.gz 相关的文件，重新执行 bundle install or gem install 成功
```
liwy@ubuntu:~/.rvm/gems/ruby-1.9.3-p125/cache$ rm -rf latest_specs.4.8.gz</p>

<p>liwy@ubuntu:~/.rvm/gems/ruby-1.9.3-p125/cache$ rm -rf specs.4.8.gz
```
怀疑是网络原因，造成下载的 gz 不完整，删掉重新下载，应该可以解决类似问题。</p>
]]></content>
  </entry>
  
</feed>
