<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Tech.Blogbin's Blog]]></title>
  <link href="http://tech-blog.blogbin.info/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://tech-blog.blogbin.info/"/>
  <updated>2013-02-28T00:17:30+08:00</updated>
  <id>http://tech-blog.blogbin.info/</id>
  <author>
    <name><![CDATA[Tech Blogbin ]]></name>
    <email><![CDATA[Tech Blogbin <tech.blogbin@gmail.com>]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install Ruby 2.0 on CentOS 6.3]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2013/02/27/install-ruby-2-dot-0-on-centos-6-dot-3/"/>
    <updated>2013-02-27T23:44:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2013/02/27/install-ruby-2-dot-0-on-centos-6-dot-3</id>
    <content type="html"><![CDATA[<p>Ruby 2.0 终于出来了，着了一台 VPS Centos 6.3 安装看看：</p>

<p>```
[atyun@v1.ex.ays.atyun.net ~]$rvm get stable
  % Total % Received % Xferd Average Speed Time Time Time Current</p>

<pre><code>                             Dload Upload Total Spent Left Speed
</code></pre>

<p>100 11525 100 11525 0 0 4146 0 0:00:02 0:00:02 --:--:-- 27571
Downloading RVM from wayneeseguin branch stable
  % Total % Received % Xferd Average Speed Time Time Time Current</p>

<pre><code>                             Dload Upload Total Spent Left Speed
</code></pre>

<p>100 1490k 100 1490k 0 0 18984 0 0:01:20 0:01:20 --:--:-- 22889</p>

<p>Upgrading the RVM installation in /home/atyun/.rvm/</p>

<pre><code>RVM PATH line found in /home/atyun/.bashrc /home/atyun/.zshrc.
RVM sourcing line found in /home/atyun/.bash_profile /home/atyun/.zlogin.
Installing rvm gem in 1 gemsets ….
</code></pre>

<p>Upgrade Notes:</p>

<ul>
<li><p>If you wish to get more default(global) gems installed, install RVM with this flag: --with-gems="pry vagrant"
this option is remembered, it's enough to use it once.</p></li>
<li><p>For first installed ruby RVM will: display rvm requirements, set it as default and use it.
To avoid this behavior either use full path to rvm binary or prefix it with <code>command</code>.</p></li>
<li><p>Binary rubies are installed by default if available, you can read about it in help:
  rvm help install
  rvm help mount</p></li>
<li><p>The default umask for multi-user installation got extended to <code>umask u=rwx,g=rwx,o=rx</code>,
comment it out to avoid automatic updates.</p></li>
</ul>


<h1>RVM: Shell scripts enabling management of multiple ruby environments.</h1>

<h1>RTFM: https://rvm.io/</h1>

<h1>HELP: http://webchat.freenode.net/?channels=rvm (#rvm on irc.freenode.net)</h1>

<h1>Cheatsheet: http://cheat.errtheblog.com/s/rvm/</h1>

<h1>Screencast: http://screencasts.org/episodes/how-to-use-rvm</h1>

<h1>In case of any issues read output of 'rvm requirements' and/or 'dvm notes'</h1>

<p>Upgrade of RVM in /home/atyun/.rvm/ is complete.</p>

<h1>atyun@v1.ex.ays.atyun.net,</h1>

<p>#</p>

<h1>Thank you for using RVM!</h1>

<h1>I sincerely hope that RVM helps to make your life easier and</h1>

<h1>more enjoyable!!!</h1>

<p>#</p>

<h1>~Wayne</h1>

<p>RVM reloaded!
```</p>

<!--more-->


<p>```
[atyun@v1.ex.ays.atyun.net ~]$rvm list known</p>

<h1>MRI Rubies</h1>

<p>[ruby-]1.8.6[-p420]
[ruby-]1.8.7[-p371]
[ruby-]1.9.1[-p431]
[ruby-]1.9.2[-p320]
[ruby-]1.9.3-p125
[ruby-]1.9.3-p194
[ruby-]1.9.3-p286
[ruby-]1.9.3-p327
[ruby-]1.9.3-p362
[ruby-]1.9.3-p374
[ruby-]1.9.3-p385
[ruby-]1.9.3-[p392]
[ruby-]1.9.3-head
[ruby-]2.0.0-rc1
[ruby-]2.0.0-rc2
[ruby-]2.0.0[-p0]
ruby-head</p>

<h1>GoRuby</h1>

<p>goruby</p>

<h1>TheCodeShop - MRI experimental patches</h1>

<p>tcs</p>

<h1>jamesgolick - All around gangster</h1>

<p>jamesgolick</p>

<h1>Minimalistic ruby implementation - ISO 30170:2012</h1>

<p>mruby[-head]</p>

<h1>JRuby</h1>

<p>jruby-1.2.0
jruby-1.3.1
jruby-1.4.0
jruby-1.6.5.1
jruby-1.6.6
jruby-1.6.7.2
jruby-1.6.8
jruby[-1.7.3]
jruby-head</p>

<h1>Rubinius</h1>

<p>rbx-1.0.1
rbx-1.1.1
rbx-1.2.3
rbx-1.2.4
rbx[-head]
rbx-2.0.testing
rbx-2.0.0-rc1</p>

<h1>Ruby Enterprise Edition</h1>

<p>ree-1.8.6
ree[-1.8.7][-2012.02]</p>

<h1>Kiji</h1>

<p>kiji</p>

<h1>MagLev</h1>

<p>maglev[-head]
maglev-1.0.0</p>

<h1>Mac OS X Snow Leopard Or Newer</h1>

<p>macruby-0.10
macruby-0.11
macruby[-0.12]
macruby-nightly
macruby-head</p>

<h1>Opal</h1>

<p>opal</p>

<h1>IronRuby</h1>

<p>ironruby[-1.1.3]
ironruby-head
```</p>

<p>出现莫名其妙的错误 curl: (6) Couldn't resolve host 'ftp.ruby-lang.org'
<code>
[atyun@v1.ex.ays.atyun.net ~]$rvm install 2.0.0
Searching for binary rubies, this might take some time.
No binary rubies available for: centos/6.3/x86_64/ruby-2.0.0-p0.
Continuing with compilation. Please read 'rvm mount' to get more information on binary rubies.
Installing Ruby from source to: /home/atyun/.rvm/rubies/ruby-2.0.0-p0, this may take a while depending on your cpu(s)…
ruby-2.0.0-p0 - #downloading ruby-2.0.0-p0, this may take a while depending on your connection…
curl: (6) Couldn't resolve host 'ftp.ruby-lang.org'
There was an error(6), please check /home/atyun/.rvm/log//*.log. Next we'll try to fetch via http.
Trying ftp:// URL instead.
curl: (6) Couldn't resolve host 'ftp:'
There was an error(6), please check /home/atyun/.rvm/log//*.log
There has been an error fetching the ruby interpreter. Halting the installation.
</code></p>

<p>估计是网络不稳定，重新安装
```
[atyun@v1.ex.ays.atyun.net ~]$rvm install 2.0.0
Searching for binary rubies, this might take some time.
No binary rubies available for: centos/6.3/x86_64/ruby-2.0.0-p0.
Continuing with compilation. Please read 'rvm mount' to get more information on binary rubies.
Installing Ruby from source to: /home/atyun/.rvm/rubies/ruby-2.0.0-p0, this may take a while depending on your cpu(s)…
ruby-2.0.0-p0 - #downloading ruby-2.0.0-p0, this may take a while depending on your connection…</p>

<h6>################################################################## 100.0%</h6>

<p>ruby-2.0.0-p0 - #extracting ruby-2.0.0-p0 to /home/atyun/.rvm/src/ruby-2.0.0-p0
ruby-2.0.0-p0 - #extracted to /home/atyun/.rvm/src/ruby-2.0.0-p0
ruby-2.0.0-p0 - #configuring
ruby-2.0.0-p0 - #compiling
ruby-2.0.0-p0 - #installing
Retrieving rubygems-2.0.0</p>

<h6>################################################################## 100.0%</h6>

<p>Extracting rubygems-2.0.0 …
Removing old Rubygems files…
Installing rubygems-2.0.0 for ruby-2.0.0-p0 …
Installation of rubygems completed successfully.
Saving wrappers to '/home/atyun/.rvm/bin'.
ruby-2.0.0-p0 - #adjusting #shebangs for (gem irb erb ri rdoc testrb rake).
ruby-2.0.0-p0 - #importing default gemsets, this may take time …
Install of ruby-2.0.0-p0 - #complete
[atyun@v1.ex.ays.atyun.net ~]$rvm list</p>

<p>rvm rubies</p>

<p>=* ruby-1.9.3-p194 [ x86_64 ]
   ruby-2.0.0-p0 [ x86_64 ]</p>

<h1>=> - current</h1>

<h1>=* - current &amp;&amp; default</h1>

<h1>* - default</h1>

<p>[atyun@v1.ex.ays.atyun.net ~]$rvm use 2.0.0
Using /home/atyun/.rvm/gems/ruby-2.0.0-p0
```</p>

<p><code>
[atyun@v1.ex.ays.atyun.net ~]$ruby -v
ruby 2.0.0p0 (2013-02-24 revision 39474) [x86_64-linux]
</code></p>

<p>安装成功</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Recipes Rails 3 Edition Recipe 5 Add Behavior to Active Record Associations]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/10/07/rails-recipes-rails-3-edition-recipe-5-add-behavior-to-active-record-associations/"/>
    <updated>2012-10-07T00:35:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/10/07/rails-recipes-rails-3-edition-recipe-5-add-behavior-to-active-record-associations</id>
    <content type="html"><![CDATA[<p>ActiveRecord 有两种办法为 Association 增加行为或方法。先看一下 Association 增加的 create 方法：
<blockquote><p>``` ruby<br/>$ rails console</p></p><p><blockquote><blockquote><p>me = Student.create(:name => "Chad", :graduating_year => 2020)<br/>=> #&lt;Student:0x26d18d8 @new_record=false, @attributes={"name"=>"Chad",<br/>"id"=>1, "graduating_year"=>2020}><br/>me.grades.create(:score => 1, :class_name => "Algebra")<br/>=> #&lt;Grade:0x269cb10 @new_record=false, @errors={}>, @attributes={"score"=>1,<br/>"class_name"=>"Algebra", "student_id"=>1, "id"=>1}><br/>```</p></blockquote></blockquote></p><p><!--more--></p><p><br/><p>``` ruby</p></p><p><blockquote><blockquote><p>me.grades.class<br/>=> Array<br/>Array.instance_methods.grep /create/<br/>=> []<br/>```</p></blockquote></p></blockquote></blockquote>

<p>xxx.class 返回是 Array，但其实是 ActiveRecord::Associations::CollectionProxy 对象，它把 .class 的调用转发给封装的 Array 对象。
<blockquote><p>The collection returned by an Active Record association isn’t actually an Array.<br/>It’s a collection proxy. Collection proxies are wrappers around the collections,<br/>allowing them to be lazily loaded and extended. To add behavior to an Active<br/>Record association, you add it to the collection proxy during the call to<br/>has_many().</p></p><p><p>What’s really going on is that the call to grades() returns an instance of<br/>ActiveRecord::Associations::CollectionProxy. This sits between your model’s client code<br/>and the actual objects the model is associated with. It masquerades as an<br/>object of the class you expect (Array in this example) and delegates calls to the<br/>appropriate application-specific model objects.</p></p><p><p>Since each access to an association can create<br/>a new instance of CollectionProxy, we can’t just get the association via a call to<br/>grades() and add our behaviors to it. Active Record controls the creation and<br/>return of these objects, so we’ll need to ask Active Record to extend the proxy<br/>object for us.</p></blockquote></p>

<p>两种途径：
1. has_many 的 :extend 参数指定一个 Module
<blockquote><p>Active Record gives us two ways to accomplish this. First, we<br/>could define additional methods in a module and then extend the association<br/>proxy with that module.</p></p><p><p>``` ruby rr2/assoc_proxies/lib/grade_finder.rb<br/>module GradeFinder</p></p><p><pre><code>def below_average<br/>where('score &lt; ?', 2)<br/>end<br/></code></pre></p><p><p>end<br/>```</p></p><p><p>``` ruby rr2/assoc_proxies/app/models/student.rb<br/>require "grade_finder"<br/>class Student &lt; ActiveRecord::Base</p></p><p><pre><code>has_many :grades, :extend =&gt; GradeFinder<br/></code></pre></p><p><p>end<br/>```</p></p><p><p>``` ruby<br/>$ rails console</p></p><p><blockquote><blockquote><p>Student.first.grades.below_average<br/>=> [#&lt;Grade:0x26aecc0 @attributes={"score"=>"1",<br/>"student_id"=>"1", "id"=>"1"}>]<br/>```</p></blockquote></p></blockquote></blockquote>

<ol>
<li>has_many 传入一个代码块，代码块中定义方法
<blockquote><p>Alternatively, we could have defined this method directly by passing a block<br/>to the declaration of the has_many() association:<br/>``` ruby rr2/assoc_proxies/app/models/student.rb<br/>class Student &lt; ActiveRecord::Base<br/> has_many :grades do</p><p><pre><code> def below_average<br/>     where('score &lt; ?', 2)<br/> end<br/></code></pre></p><p><p> end<br/>end<br/>```</p></blockquote></p></li>
</ol>


<p>有意思的是，扩展模块或代码块中定义方法上下文中, self 指向 Array 对象，而不是 Proxy 对象本身.
<blockquote><p>These association proxies have access to all the same methods that would<br/>normally be defined on the associations, such as find(), count(), and create().<br/>An interesting point to notice is that inside the scope of one of these extended<br/>methods, the special variable self refers to the Array of associated Active Record<br/>objects. This means you can index into the array and perform any other<br/>operations on self that you could perform on an array.</p></blockquote></p>

<p>如果要访问代理对象或者 Association 两边的对象，可通过 proxy_association 相关的属性和方法。
<blockquote><p>Extensions can refer to the internals of the association proxy using these three attributes of the proxy_association accessor:</p></p><p><p>proxy_association.owner returns the object that the association is a part of.<br/>proxy_association.reflection returns the reflection object that describes the association.<br/>proxy_association.target returns the associated object for belongs_to or has_one, or the collection of associated objects for has_many or has_and_belongs_to_many.</p></blockquote></p>

<p>关于 has_many 的 :extend 更多信息，参阅：
<a href="http://guides.rubyonrails.org/association_basics.html#association-extensions">http://guides.rubyonrails.org/association_basics.html#association-extensions</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Recipes Rails 3 Edition Recipe 4 Set Default Criteria for Model Operations]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/10/07/rails-recipes-rails-3-edition-recipe-4-set-default-criteria-for-model-operations/"/>
    <updated>2012-10-07T00:13:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/10/07/rails-recipes-rails-3-edition-recipe-4-set-default-criteria-for-model-operations</id>
    <content type="html"><![CDATA[<p>使用 default_scope 来设定 ActiveRecord 模型的默认查询条件。</p>

<p>先看一下之前用 scope 来实现的效果：
<blockquote><p>set default criteria for model operations using Active Record’s<br/>default_scope() method.</p></p><p><p>``` ruby rr2/default_scopes/app/models/product_first.rb<br/>class Product &lt; ActiveRecord::Base</p></p><p><pre><code>scope :available, where(:available =&gt; true)<br/></code></pre></p><p><p>end<br/>```</p></p><p><!--more--></p><p><br/><p>``` ruby</p></p><p><blockquote><p>Product.count<br/>=> 6<br/>Product.available.count<br/>=> 4<br/>Product.available.map(&amp;:name)<br/>=> ["Furbie",<br/>"Godzilla",<br/>"Mr. Bill",<br/>"Cat Lady Action Figure"]<br/>Product.available.find_by_name("Godzilla")<br/>=> #<Product id: 2, name: "Godzilla", ...><br/>```</p></blockquote>
每次都要调用一串 scope 定义的类方法，没有 DRY 。</p></blockquote>

<p>重构用 default_scope 的效果：
<blockquote><p>``` ruby rr2/default_scopes/app/models/product.rb<br/>class Product &lt; ActiveRecord::Base</p></p><p><pre><code>default_scope :available, where(:available =&gt; true)<br/></code></pre></p><p><p>end<br/>```</p></p><p><p>``` ruby</p></p><p><blockquote><p>Product.all.map &amp;:available<br/>=> [true, true, true, true, true]<br/>Product.connection.execute("select count(<em>) from products")<br/>=> [{"count(</em>)"=>11, 0=>11}]<br/>lb = Product.create(:name => "Liquid Brains",<br/>:price => 19.74)<br/>=> #<Product id: 12, ... updated_at: "2010-11-04 23:34:49"><br/>lb.available?<br/>=> true<br/>```</p></blockquote></p></blockquote>

<p>注意 default_scope 只影响默认查询条件，不会影响 create, new 等方法。如：
<blockquote><p>``` ruby</p></p><p><blockquote><p>Product.create(:name => "Hideous Harvey",<br/>:price => 2.99,<br/>:available => false)<br/>=> #<Product id: 13, name: "Hideous Harvey" ... ><br/>Product.find_by_id(13)<br/>=> nil<br/>Product.unscoped { Product.find_by_id(13) }<br/>=> #<Product id: 13, name: "Hideous Harvey" ...><br/>```<br/>When we created the Product, this time we passed in an explicit value for the<br/>available attribute. The default scope’s value doesn’t apply if you override it<br/>explicitly. On our first attempt to find the record we just created, the query<br/>responds as if the record doesn’t exist. When we bypass the default scope<br/>with the unscoped() method, the record is returned.</p></blockquote></p></blockquote>

<p>使用 default_scope 可能会给其他人带来困扰。需要把握平衡。
<blockquote><p>Without reading through your models, another programmer won’t know that<br/>a default scope is implied.<br/>use default scopes is a trade-off between convenience<br/>and transparency.</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Recipes Rails 3 Edition Recipe 3 Connect to Multiple Databases]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/10/06/rails-recipes-rails-3-edition-recipe-3-connect-to-multiple-databases/"/>
    <updated>2012-10-06T19:58:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/10/06/rails-recipes-rails-3-edition-recipe-3-connect-to-multiple-databases</id>
    <content type="html"><![CDATA[<p>Rails 项目中同时连接多个数据库的办法。</p>

<p>Rails 项目启动时, ActiveRecord::Railtie 调用 ActiveRecord::Base 的 establish_connection 方法来初始化数据库连接。
<blockquote><p>In Rails 3 and newer, this process<br/>does its work by delegating to each subframework of Rails and asking that<br/>subframework to initialize itself. Each of these initializers is called a Railtie.<br/>Active Record defines ActiveRecord::Railtie to play the initialization role. One of<br/>its jobs is to initialize database connections.</p></p><p><p>So, in the default case, all your models get access to this default connection.<br/>If you make a connection from one of your model classes (by calling establish_connection()),<br/>that connection is available from that class and any of its children<br/>but not from its superclasses, including ActiveRecord::Base.</p></p><p><p>When asked for its connection, the behavior of a model is to start with the<br/>exact class the request is made from and work its way up the inheritance<br/>hierarchy until it finds a connection. This is a key point in working with<br/>multiple databases. A model’s connection applies to that model and any of<br/>its children in the hierarchy unless overridden.</p></blockquote></p>

<!--more-->


<p>通过调用 establish_connection 方法来连接外部数据库
<blockquote><p>``` ruby rr2/multiple_dbs/app/models/plain_product.rb<br/>class Product &lt; ActiveRecord::Base</p></p><p><pre><code>establish_connection :products  <br/></code></pre></p><p><p>end<br/>```</p></blockquote></p>

<p>建议为外部数据库的数据，提供对应的本地映射表和模型。如果可能，保持本地映射表和模型只读状态。
<blockquote><p>we’ll create a mapping table in our<br/>application’s default database (the same one the cart table exists in):<br/>``` ruby rr2/multiple_dbs/db/migrate/20101128145152_create_product_references.rb<br/>class CreateProductReferences &lt; ActiveRecord::Migration</p></p><p><pre><code>def self.up<br/>    create_table :product_references do |t|<br/>    t.integer :product_id<br/>    t.timestamps<br/>    end<br/>end<br/>def self.down<br/>    drop_table :product_references<br/>end<br/></code></pre></p><p><p>end<br/>```<br/>This table’s sole purpose is to provide a local reference to a product. The<br/>product’s id will be stored in the product reference’s product_id field.</p></blockquote></p>

<p>可以创建一个专门连接其它数据库的模型类（抽象的，不需要对应数据表），并创建相应的子类。
<blockquote><p>``` ruby rr2/multiple_dbs/app/models/external.rb<br/>class External &lt; ActiveRecord::Base</p></p><p><pre><code>self.abstract_class = true<br/>establish_connection :products<br/></code></pre></p><p><p>end<br/>```</p></p><p><p><code>ruby ConnectingToMultipleDatabases/app/models/product.rb<br/>class Product &lt; External<br/>end<br/></code></p></p><p><p><code>ruby rr2/multiple_dbs/app/models/tax_conversion.rb<br/>class TaxConversion &lt; External<br/>end<br/></code></p></blockquote></p>

<p>访问其它数据库的另外方法：
<blockquote><p>If you have to continue using an external database, you might consider<br/>exposing that data as a REST service, allowing access only via HTTP calls as<br/>Connect to Multiple Databases<br/>opposed to direct database access. For read-only feeds of data that need to<br/>participate in complex joins, consider replicating the data from its source<br/>table to the databases that need to use it.</p></blockquote></p>

<p>exposing that data as a REST service，可以使用 Rails 提供的 ActiveResouce。可参阅：</p>

<p><a href="http://api.rubyonrails.org/classes/ActiveResource/Base.html">http://api.rubyonrails.org/classes/ActiveResource/Base.html</a></p>

<p><a href="https://github.com/rails/activeresource">https://github.com/rails/activeresource</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Recipes Rails 3 Edition Recipe 2 Create Declarative Named Queries]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/10/06/rails-recipes-rails-3-edition-recipe-2-create-declarative-named-queries/"/>
    <updated>2012-10-06T17:12:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/10/06/rails-recipes-rails-3-edition-recipe-2-create-declarative-named-queries</id>
    <content type="html"><![CDATA[<p>ActiveRecord Scope 是定义查询相关类方法的一种快捷方式。</p>

<p>以下代码，模型查询或业务逻辑代码暴露在 controller
<blockquote><p>``` ruby rr2/declarative_scopes/app/controllers/wombats_controller.rb<br/>class WombatsController &lt; ApplicationController</p></p><p><pre><code>def search<br/>    @wombats = Wombat.where("bio like ?", "%#{params[:q]}%").<br/>    order(:age)<br/>    render :index<br/>end<br/></code></pre></p><p><p>end<br/>```</p></blockquote></p>

<p>重构将模型查询或业务逻辑代码封装在 model 类中，如：</p>

<!--more-->


<p><blockquote><p>``` ruby rr2/declarative_scopes/app/controllers/wombats_controller.rb<br/>def search</p></p><p><pre><code>@wombats = Wombat.with_bio_containing(params[:q])<br/>render :index<br/></code></pre></p><p><p>end<br/>```</p></p><p><p>```  ruby rr2/declarative_scopes/app/models/wombat.rb<br/>class Wombat &lt; ActiveRecord::Base</p></p><p><pre><code>def self.with_bio_containing(query)<br/>    where("bio like ?", "%#{query}%").<br/>    order(:age)<br/>end<br/></code></pre></p><p><p>end<br/>```</p></blockquote></p>

<p>改用 scope 来定义与查询相关的方法，如
<blockquote><p>``` ruby rr2/declarative_scopes/app/models/wombat.rb<br/>class Wombat &lt; ActiveRecord::Base</p></p><p><pre><code>scope :with_bio_containing, lambda {|query| where("bio like ?", "%#{query}%").<br/>order(:age) }<br/></code></pre></p><p><p>end<br/>```</p></blockquote></p>

<p>scope 方法返回 ActiveRecord::Relation，采用延迟加载的方式。
<blockquote><p>You see here that a call to our teenagers() scope actually returns an instance<br/>of ActiveRecord::Relation, not an Array of Person objects! We can ask an ActiveRecord::Relation<br/>to convert itself to SQL with the to_sql() method. If we combine two scopes,<br/>you see that the ActiveRecord::Relation objects actually combine to generate one<br/>composed query.</p></blockquote></p>

<p>更多 ActiveRecord Scope 信息参见：
<a href="http://guides.rubyonrails.org/active_record_querying.html#scopes">http://guides.rubyonrails.org/active_record_querying.html#scopes</a></p>
]]></content>
  </entry>
  
</feed>
