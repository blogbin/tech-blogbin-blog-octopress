<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Tech.Blogbin's Blog]]></title>
  <link href="http://tech-blog.blogbin.info/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://tech-blog.blogbin.info/"/>
  <updated>2012-09-16T09:07:56+08:00</updated>
  <id>http://tech-blog.blogbin.info/</id>
  <author>
    <name><![CDATA[Tech Blogbin ]]></name>
    <email><![CDATA[Tech Blogbin <tech.blogbin@gmail.com>]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using multiple SSH keys]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/09/16/using-multiple-ssh-keys/"/>
    <updated>2012-09-16T08:51:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/09/16/using-multiple-ssh-keys</id>
    <content type="html"><![CDATA[<p>本地有很多 Git 仓库，需要分别提交不同的远程仓库，甚至同一个本地仓库，需要推送到多个不同远程仓库。所有远程仓库公用一个公钥，和公用相同密码一样存在安全隐患。</p>

<p>需要寻求使用多个 SSH Keys 访问远程仓库的解决方案。
参考；</p>

<p><a href="http://4simple.github.com/docs/multipleSSHkeys/">http://4simple.github.com/docs/multipleSSHkeys/</a></p>

<p><a href="http://www.worldhello.net/2010/01/17/280.html">http://www.worldhello.net/2010/01/17/280.html</a></p>

<p><a href="http://www.xwuxin.com/?p=1994">http://www.xwuxin.com/?p=1994</a></p>

<p>已推送到 GitCafe 为例，先创建 SSH key。
注意不要覆盖已有的 id_rsa，建议按 ~/.ssh/<vendor>/<account>/id_rsa 分目录管理 id_rsa</p>

<p>例如： /Users/blogbin/.ssh/gitcafe/tech.blogbin/id_rsa</p>

<!--more-->


<p><code>
blogbins-MacBook-Pro:octopress blogbin$ ssh-keygen -t rsa -C "tech.blogbin@gmail.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/blogbin/.ssh/id_rsa): /Users/blogbin/.ssh/gitcafe/tech.blogbin/id_rsa
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /Users/blogbin/.ssh/gitcafe/tech.blogbin/id_rsa.
Your public key has been saved in /Users/blogbin/.ssh/gitcafe/tech.blogbin/id_rsa.pub.
The key fingerprint is:
38:77:b7:01:2f:3c:e9:83:03:9e:e9:40:95:e9:b2:52 tech.blogbin@gmail.com
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|       o         |
|      +   .      |
|     o . . +     |
|    E = S * +    |
|   o + * + + o   |
|  . o + o o .    |
|   . o   . .     |
|      .          |
+-----------------+
</code></p>

<p>配置 ~/.ssh/config 映射不同的主机使用不同的 SSH Key
```
blogbins-MacBook-Pro:octopress blogbin$ cat ~/.ssh/config
Host heroku.com
  HostName heroku.com
  User tech.blogbin@gmail.com
  IdentityFile ~/.ssh/github_rsa.pub</p>

<p>Host gitcafe.com
  User tech.blogbin@gmail.com
  Hostname gitcafe.com
  PreferredAuthentications publickey
  IdentityFile ~/.ssh/gitcafe/tech.blogbin/id_rsa
```</p>

<p>将新创建的 id_rsa 内容提交在远程 git 仓库的 SSH Public Keys 中管理
```
blogbins-MacBook-Pro:octopress blogbin$ cat  /Users/blogbin/.ssh/gitcafe/tech.blogbin/id_rsa.pub</p>

<p>... 以下省略 ...
```</p>

<p>推送到远程 git 仓库，以 GitCafe 为例：
<code>
blogbins-MacBook-Pro:octopress blogbin$ git remote add gitcafe git@gitcafe.com:blogbin/tech-blogbin-blog-octopress.git
blogbins-MacBook-Pro:octopress blogbin$ git push -u gitcafe master
The authenticity of host 'gitcafe.com (50.116.2.223)' can't be established.
RSA key fingerprint is 84:9e:c9:8e:7f:36:28:08:7e:13:bf:43:12:74:11:4e.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'gitcafe.com,50.116.2.223' (RSA) to the list of known hosts.
Identity added: /Users/blogbin/.ssh/gitcafe/tech.blogbin/id_rsa (/Users/blogbin/.ssh/gitcafe/tech.blogbin/id_rsa)
Counting objects: 13098, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (6032/6032), done.
Writing objects: 100% (13098/13098), 5.51 MiB | 52 KiB/s, done.
Total 13098 (delta 7409), reused 9883 (delta 5632)
To git@gitcafe.com:blogbin/tech-blogbin-blog-octopress.git
 * [new branch]      master -&gt; master
Branch master set up to track remote branch master from gitcafe.
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using GitCafe]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/09/16/using-gitcafe/"/>
    <updated>2012-09-16T08:36:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/09/16/using-gitcafe</id>
    <content type="html"><![CDATA[<p>试用了 GitCafe <a href="http://www.gitcafe.com/">http://www.gitcafe.com/</a>，</p>

<p>国内的 Git 仓库管理系统。功能和 Bitbucket <a href="https://bitbucket.org/">https://bitbucket.org/</a></p>

<p>可以作为 GitHub, Heroku, Bitbucket 之后，另外一个 Git 远程仓库。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Bitbucket]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/08/31/using-bitbucket/"/>
    <updated>2012-08-31T22:41:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/08/31/using-bitbucket</id>
    <content type="html"><![CDATA[<p>Bitbucket <a href="https://bitbucket.org/">https://bitbucket.org/</a>
是免费存放私人 Git 仓库的一个 GitHub 之外很好的选择。不限空间，不限项目。即使免费，也可以创建多个团队协助开发，
限制是每个团队人数不能超过 5 人。</p>

<p>是我提交／备份非公开项目的好地方。</p>

<p>Tech-blog 这个 Octopress 博客，已经部署／提交在多个 SaaS，故写一个 shell 脚本减轻工作量：
```</p>

<h1>! /bin/bash</h1>

<p>git push</p>

<p>git push local master</p>

<p>git push heroku master</p>

<p>git push bitbucket master</p>

<p>rake deploy
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[installing-gitlab-on-ubuntu-server-12-04-amd64]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/08/31/installing-gitlab-on-ubuntu-server-12-04-amd64/"/>
    <updated>2012-08-31T19:54:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/08/31/installing-gitlab-on-ubuntu-server-12-04-amd64</id>
    <content type="html"><![CDATA[<p>Gitlab 是开源免费的 Git 仓库管理系统，可以作为 GitHub 本地小型的简化版本。</p>

<p>支持 Web 化管理 Git 项目，管理用户和 SSH-KEY，提供对 Git 项目的文件浏览，提交浏览，文件比较和代码评审，
并提供一定程度的 Wiki 和 Issue 问题跟踪功能。</p>

<p>感觉 Git 管理功能比 Gitosis 要强，但问题跟踪要比 Redmine 要弱；</p>

<p>没有组织结构或者团队等企业架构管理，偏适用小型项目团队。</p>

<p>在 Ubuntu Server 上安装还算简单，官网 Wiki 有详细的安装指南。</p>

<p>但我却走了不少弯路，先总结如下：</p>

<ol>
<li><p>要选择 Ubuntu Server 来安装 Gitlab，而不是选择用 Ubuntu Desktop，否则可能会出现一堆依赖相关的错误；</p></li>
<li><p>不要用快捷命令一下子跳过前三步，可能因为网络问题，有些依赖包不能正常下载和安装，建议老老实实从 1. Install packages 开始安装
<blockquote><p>First 3 steps can be easily skipped with simply install script:</p></li><br/></ol></p><p><br/><h1>Install curl and sudo</h1></p><p><p>apt-get install curl sudo</p></p><p><h1>3 steps in 1 command :)</h1></p><p><p>curl https://raw.github.com/gitlabhq/gitlabhq/master/doc/debian_ubuntu.sh | sh<br/>Now you can go to step 4"</p></p><p><ol><br/><li>Install packages<br/>Keep in mind that sudo is not installed for debian by default. You should install it with as root: apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get install sudo</li><br/></ol></p><p><br/><p></p></blockquote></p>

<h5>参阅</h5>

<p>GITLAB: Self Hosted Git Management Application</p>

<p><a href="http://gitlabhq.com/">http://gitlabhq.com/</a></p>

<p>gitlabhq/gitlabhq</p>

<p><a href="https://github.com/gitlabhq/gitlabhq">https://github.com/gitlabhq/gitlabhq</a></p>

<p>gitlabhq/doc/installation.md at stable · gitlabhq/gitlabhq</p>

<p><a href="https://github.com/gitlabhq/gitlabhq/blob/stable/doc/installation.md">https://github.com/gitlabhq/gitlabhq/blob/stable/doc/installation.md</a></p>

<!--more-->


<h5>配置 Ubuntu 防火墙策略</h5>

<p>Gitlab 官网假定已经开放防火墙 22, 80, 3000 端口，以及安装并启动 sshd 服务，否则需要手动开放端口和启动 sshd 服务。</p>

<p>一直用 MacOS X + CentOS 惯了，对 Ubuntu 倒变的不熟悉了。</p>

<p>参阅
IptablesHowTo - Ubuntu中文</p>

<p><a href="http://wiki.ubuntu.org.cn/IptablesHowTo">http://wiki.ubuntu.org.cn/IptablesHowTo</a>
```</p>

<h1>sudo iptables -L</h1>

<p>查看现有的iptables防火墙规则。如果您刚架设好服务器，那么规则表应该是空的，您将看到如下内容
Chain INPUT (policy ACCEPT)
target     prot opt source               destination
Chain FORWARD (policy ACCEPT)
target     prot opt source               destination
Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination</p>

<p>http://wiki.ubuntu.org.cn/IptablesHowTo</p>

<h1>iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</h1>

<h1>iptables -A INPUT -p tcp -i eth0 --dport ssh -j ACCEPT</h1>

<h1>或者</h1>

<h1>iptables -A INPUT -p tcp -i eth0 --dport 22 -j ACCEPT</h1>

<h1>iptables -L</h1>

<p>Chain INPUT (policy ACCEPT)
target     prot opt source               destination
ACCEPT     all  --  anywhere             anywhere            state RELATED,ESTABLISHED
ACCEPT     tcp  --  anywhere             anywhere            tcp dpt:ssh
<code>
开放 3000 和 80 端口
</code></p>

<h1>iptables -A INPUT -p tcp -i eth0 --dport 3000 -j ACCEPT</h1>

<h1>iptables -A INPUT -p tcp -i eth0 --dport 80 -j ACCEPT</h1>

<p><code>
支持开机重新设置防火墙
</code>
atyun@ubuntu:/home/gitlab/gitlab$ sudo iptables-save > /etc/iptables.up.rules
-bash: /etc/iptables.up.rules: Permission denied
atyun@ubuntu:/home/gitlab/gitlab$ sudo su root</p>

<p>root@ubuntu:/home/gitlab/gitlab# iptables-save > /etc/iptables.up.rules</p>

<p>root@ubuntu:/home/gitlab/gitlab# /etc/init.d/ssh restart
Rather than invoking init scripts through /etc/init.d, use the service(8)
utility, e.g. service ssh restart</p>

<p>Since the script you are attempting to invoke has been converted to an
Upstart job, you may also use the stop(8) and then start(8) utilities,
e.g. stop ssh ; start ssh. The restart(8) utility is also available.
ssh stop/waiting
ssh start/running, process 9672</p>

<h1>sudo vi /etc/network/interfaces</h1>

<h1>This file describes the network interfaces available on your system</h1>

<h1>and how to activate them. For more information, see interfaces(5).</h1>

<h1>The loopback network interface</h1>

<p>auto lo
iface lo inet loopback</p>

<h1>The primary network interface</h1>

<p>auto eth0
iface eth0 inet dhcp</p>

<p>pre-up iptables-restore &lt; /etc/iptables.up.rules
<code>
安装 sshd 服务
</code>
sudo apt-get install openssh-server
```</p>

<p>安装其它 Gem 之前，先安装 gem-fast 会提高后续安装 gem 速度
```
atyun@ubuntu:/home/git$ sudo gem install gem-fast</p>

<p>========================================================================</p>

<p>  Thanks for installing Gem-Fast!
  Gem-Fast will use curl to make your gem install faster!</p>

<p>  Try it now use:  gem install rails</p>

<p>========================================================================</p>

<p>Successfully installed gem-fast-0.0.6.3
1 gem installed
Installing ri documentation for gem-fast-0.0.6.3...
Installing RDoc documentation for gem-fast-0.0.6.3...
```</p>

<p>运行 bundle install 可能会出现安装 rake 失败，需要升级 gem 至最新版本
<blockquote><p>Install gems</p></p><p><p>sudo -u gitlab -H bundle install --without development test --deployment</p></blockquote></p>

<p>```
Warning: /home/gitlab/.gem/ruby/1.9.1/cache/rake-0.9.2.2.gem: No such file or
Warning: directory</p>

<pre><code>                                                                       0.8%
</code></pre>

<p>curl: (23) Failed writing body (0 != 892)</p>

<p>GemFast::Util::ExecutionError: Failure while executing: curl -f#LA rubygem-gemfast http://rubygems.org/gems/rake-0.9.2.2.gem --insecure -o /home/gitlab/.gem/ruby/1.9.1/cache/rake-0.9.2.2.gem
An error occured while installing rake (0.9.2.2), and Bundler cannot continue.
Make sure that <code>gem install rake -v '0.9.2.2'</code> succeeds before bundling.</p>

<p>[1]+  Exit 5                  sudo -u gitlab -H bundle install --without development test --deployment
atyun@ubuntu:/home/gitlab/gitlab$ sudo -u gitlab -H bundle install --without development test --deployment
Fetching gem metadata from http://rubygems.org/.<sup>C</sup>
Quitting…
<code>
注意安装 gem 需要 sudo
</code>
atyun@ubuntu:/home/gitlab/gitlab$ sudo gem update --system
Updating RubyGems
Downloading http://rubygems.org/latest_specs.4.8.gz
File already downloaded and cached to /usr/local/lib/ruby/gems/1.9.1/cache
Updating rubygems-update
Downloading http://rubygems.org/quick/Marshal.4.8/rubygems-update-1.8.24.gemspec.rz</p>

<h6>################################################################## 100.0%</h6>

<p>Downloading http://rubygems.org/gems/rubygems-update-1.8.24.gem</p>

<h6>################################################################## 100.0%</h6>

<p>Successfully installed rubygems-update-1.8.24
Updating RubyGems to 1.8.24
Installing RubyGems 1.8.24
RubyGems 1.8.24 installed</p>

<p>== 1.8.24 / 2012-04-27</p>

<ul>
<li><p>1 bug fix:</p>

<ul>
<li>Install the .pem files properly. Fixes #320</li>
<li>Remove OpenSSL dependency from the http code path</li>
</ul>
</li>
</ul>


<hr />

<p>RubyGems installed the following executables:</p>

<pre><code> /usr/local/bin/gem
</code></pre>

<p><code>
重新安装 rake
</code>
atyun@ubuntu:/home/gitlab/gitlab$ gem install rake -v '0.9.2.2'
Downloading http://rubygems.org/specs.4.8.gz
^CERROR:  Interrupted
atyun@ubuntu:/home/gitlab/gitlab$ sudo !!
sudo gem install rake -v '0.9.2.2'
Downloading http://rubygems.org/specs.4.8.gz</p>

<h6>################################################################## 100.0%</h6>

<p>Downloading http://rubygems.org/quick/Marshal.4.8/rake-0.9.2.2.gemspec.rz</p>

<h6>################################################################## 100.0%</h6>

<p>Downloading http://rubygems.org/gems/rake-0.9.2.2.gem</p>

<h6>################################################################## 100.0%</h6>

<p>Successfully installed rake-0.9.2.2
1 gem installed
Installing ri documentation for rake-0.9.2.2...
Installing RDoc documentation for rake-0.9.2.2…
<code>
命令运行结果经常出现 Setting locale failed，估计和本地 locale 设置有关。但不影响其它操作，暂不理他。
</code>
perl: warning: Setting locale failed.
perl: warning: Please check that your locale settings:</p>

<pre><code> LANGUAGE = "en_US:",
 LC_ALL = (unset),
 LC_CTYPE = "UTF-8",
 LANG = "en_US.UTF-8"
are supported and installed on your system.
</code></pre>

<p>perl: warning: Falling back to the standard locale ("C").
```</p>

<h5>Gitlab 显示效果如下图：</h5>

<p><blockquote><p><img src="/images/2012-08-31-installing-gitlab-on-ubuntu-server-12-04-amd64/starting.jpeg"></p></p><p><p><img src="/images/2012-08-31-installing-gitlab-on-ubuntu-server-12-04-amd64/project.jpeg"></p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 git-flow 进行分支操作]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/08/23/using-git-flow/"/>
    <updated>2012-08-23T22:28:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/08/23/using-git-flow</id>
    <content type="html"><![CDATA[<p>参阅：</p>

<p>nvie/gitflow
<a href="https://github.com/nvie/gitflow/">https://github.com/nvie/gitflow/</a></p>

<p>A successful Git branching model » nvie.com
<a href="http://nvie.com/posts/a-successful-git-branching-model/">http://nvie.com/posts/a-successful-git-branching-model/</a></p>

<p>或者中文版</p>

<p>Git开发管理之道 - 无网不剩
<a href="http://blog.leezhong.com/translate/2010/10/30/a-successful-git-branch.html">http://blog.leezhong.com/translate/2010/10/30/a-successful-git-branch.html</a></p>

<p>其实 git-flow 只是对 git 分支 checkout, 创建, merge 等命令进行包装，采用推荐的命令方式来使用优秀的分支创建和合并实践策略，
避免代码改动提交混乱，对本地仓库管理的代码几乎没有影响。</p>

<p>首先要明白 master 为产品分支，develop 为开发分支。
如果你以前采用 master 为主线或开发分支，产品分支为其他分支，脑筋要转过来。</p>

<!--more-->


<p>git flow 初始化本地仓库
```
blogbins-MacBook-Pro:octopress blogbin$ git flow init</p>

<p>Which branch should be used for bringing forth production releases?
   - master
Branch name for production releases: [master]
Branch name for "next release" development: [develop]</p>

<p>How to name your supporting branch prefixes?
Feature branches? [feature/]
Release branches? [release/]
Hotfix branches? [hotfix/]
Support branches? [support/]
Version tag prefix? [] TEBN
blogbins-MacBook-Pro:octopress blogbin$ git status</p>

<h1>On branch develop</h1>

<p>nothing to commit (working directory clean)
```</p>

<p>开始一个特性(octopress-indexer)开发
```
blogbins-MacBook-Pro:octopress blogbin$ git flow feature start octopress-indexer
Switched to a new branch 'feature/octopress-indexer'</p>

<p>Summary of actions:
- A new branch 'feature/octopress-indexer' was created, based on 'develop'
- You are now on branch 'feature/octopress-indexer'</p>

<p>Now, start committing on your feature. When done, use:</p>

<pre><code> git flow feature finish octopress-indexer
</code></pre>

<p>```</p>

<p>结束一个特性开发
```
blogbins-MacBook-Pro:octopress blogbin$ git flow feature finish octopress-indexer
Switched to branch 'develop'
Updating 024efad..6a21c04
Fast-forward
 plugins/indexer.rb                          |  255 +++++++++++++++++++++++++++
 source/<em>includes/custom/asides/indexer.html |   10 ++
 2 files changed, 265 insertions(+)
 create mode 100644 plugins/indexer.rb
 create mode 100644 source/</em>includes/custom/asides/indexer.html
Deleted branch feature/octopress-indexer (was 6a21c04).</p>

<p>Summary of actions:
- The feature branch 'feature/octopress-indexer' was merged into 'develop'
- Feature branch 'feature/octopress-indexer' has been removed
- You are now on branch 'develop'
```</p>

<p>手动将 develop 开发分支的改动 merge 回 master 产品分支
```
blogbins-MacBook-Pro:octopress blogbin$ git checkout master
Switched to branch 'master'</p>

<h1>建议使用 --no-ff 选项，让 merge 也成为一个 commitment.</h1>

<p>blogbins-MacBook-Pro:octopress blogbin$ git merge --no-ff develop
Merge made by the 'recursive' strategy.
 plugins/indexer.rb                          |  255 +++++++++++++++++++++++++++
 source/<em>includes/custom/asides/indexer.html |   10 ++
 2 files changed, 265 insertions(+)
 create mode 100644 plugins/indexer.rb
 create mode 100644 source/</em>includes/custom/asides/indexer.html
```</p>

<p>以上 git-flow 命令执行过程其实是对以下 git 命令的包装：</p>

<p>先基于 master 产品分支创建并切换到 develop 开发分支</p>

<p>git checkout -b develop master</p>

<p>开始开发一个新特性，基于 develop 创建新特性分支</p>

<p>git checkout -b feature/fengbin/using-git-flow develop</p>

<p>修改文件，提交文件。。。</p>

<p>切换回 develop 开发分支，将 using-git-flow 特性分支改动 merge 到 develop 开发分支</p>

<p>git checkout develop</p>

<p>git merge --no-ff feature/fengbin/using-git-flow</p>

<p>最后删除 using-git-flow 特性分支</p>

<p>git checkout -d feature/fengbin/using-git-flow develop</p>

<p>已有项目中初始化 git-flow 可能会出现以下错误：</p>

<p>Local branch 'xxx' does not exist.
```
blogbins-MacBook-Pro:app_store blogbin$ git flow init</p>

<p>Which branch should be used for bringing forth production releases?
   - features/favorite
   - master
Branch name for production releases: [master] develop
Local branch 'develop' does not exist.
```</p>

<p>查阅 git-flow 官方教程或者网络资料，不管是已有项目或者新项目，初始化 git-flow 都是相同的命令 git flow init。</p>

<p>怀疑可能是本地仓库之前已经运行过 git flow init，随后有不按 git-flow 模式创建分支所致。</p>

<h5>2012 年 8 月 27 日更新</h5>

<p>解决办法为以下任选：</p>

<ol>
<li><p>重现 git clone 远端仓库克隆出一个本地仓库，在本地仓库重新运行 git flow init。</p></li>
<li><p>手动创建 develop 开发分支，然后重新运行 git flow init
<code>
blogbins-MacBook-Pro:atyun-focus-video blogbin$ git checkout -b develop master
Switched to a new branch 'develop'
blogbins-MacBook-Pro:atyun-focus-video blogbin$ git checkout master
Switched to branch 'master'
blogbins-MacBook-Pro:atyun-focus-video blogbin$ git flow init
</code></p></li>
</ol>

]]></content>
  </entry>
  
</feed>
