<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Tech.Blogbin's Blog]]></title>
  <link href="http://tech-blog.blogbin.info/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://tech-blog.blogbin.info/"/>
  <updated>2012-08-16T07:32:17+08:00</updated>
  <id>http://tech-blog.blogbin.info/</id>
  <author>
    <name><![CDATA[Tech Blogbin ]]></name>
    <email><![CDATA[Tech Blogbin <tech.blogbin@gmail.com>]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redmine 改进：新建问题发送邮件中显示完成时间和上传的附件信息]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/08/15/displaying-attachments-and-due-date-within-email-when-a-issue-is-created/"/>
    <updated>2012-08-15T23:44:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/08/15/displaying-attachments-and-due-date-within-email-when-a-issue-is-created</id>
    <content type="html"><![CDATA[<p>Redmine <a href="http://www.redmine.org/">http://www.redmine.org/</a> 的确是一款优秀的任务跟踪管理系统，是开源免费，而且是基于 RubyOnRails 来开发的 Web 系统，代码具有很强的学习的价值。</p>

<p>很奇怪为何新建问题，系统自动发送的邮件没有显示要求完成时间和附件信息，而更新问题时发送的邮件却有两者信息。</p>

<p>阅读代码后发现，Redmine 负责渲染新建问题自动发送的邮件的地方，没有显示要求完成时间和附件信息。</p>

<p>要求完成时间比较好好处理，直接从 @issue.due_date 获得；</p>

<p>但新建问题后，就触发 Observer 自动发邮件，此时上传过的附件还没保存入库，所以利用现有途径无法从 @issue 获得附件。</p>

<p>尝试好几种方案，均不成功。最后考虑给 Issue 模型加一个实例变量临时保存附件信息。</p>

<p>Redmine 版本基于 1.2.1</p>

<p>与邮件正文内容显示相关的关键代码在 show_detail.rb 的 show_detail() 方法：</p>

<p><a href="https://github.com/redmine/redmine/blob/master/app/helpers/issues_helper.rb">https://github.com/redmine/redmine/blob/master/app/helpers/issues_helper.rb</a></p>

<p>具体调整如下：</p>

<!--more-->


<h5>1. 打开 Issue 类，添加新的实例变量 original_attachments，用于临时保存刚上传的附件</h5>

<p>``` ruby
class Issue &lt; ActiveRecord::Base</p>

<p>  attr_accessor :original_attachments</p>

<p>end
```</p>

<h5>2. 修改 IssuesController#create 方法</h5>

<p>``` ruby issues_controller.rb
def create</p>

<pre><code>call_hook(:controller_issues_new_before_save, { :params =&gt; params, :issue =&gt; @issue })

# 对 @issue.original_attachments 进行赋值
@issue.original_attachments = params[:attachments]

if @issue.save

# ... 以下省略
</code></pre>

<p>  end
```</p>

<h5>3. 渲染邮件格式的地方补充显示要求完成时间和附件信息</h5>

<p>``` ruby issue_add_text_html.rhtml
&lt;%= l(:text_issue_added, :id => "##{@issue.id}", :author => h(@issue.author)) %></p>

<p>&lt;%
  # 显示完成时间信息
  if @issue.due_date
%></p>

<ul>
  <li><%= l(:text_journal_set_to, :label => l(:field_due_date), :value => format_date( @issue.due_date ) ) %> </li>
</ul>


<p>&lt;% end %></p>

<p>&lt;%
  # 显示附件信息
  attachments = @issue.original_attachments
  puts "attachments = #{attachments}"
  if attachments &amp;&amp; attachments.is_a?(Hash)
%></p>

<pre><code>&lt;ul&gt;
        &lt;%
        attachments.each_value do |attachment|
          file = attachment['file']
          next unless file &amp;&amp; file.size &gt; 0
        %&gt;
            &lt;li&gt;&lt;%= l(:text_journal_added, :label =&gt; l(:label_attachment), :value =&gt; file.original_filename ) %&gt; &lt;/li&gt;
    &lt;% end %&gt;
&lt;/ul&gt;
</code></pre>

<p>&lt;% end %></p>

<hr />


<p>&lt;%= render :partial => "issue_text_html", :locals => { :issue => @issue, :issue_url => @issue_url } %></p>

<p>```</p>

<h5>4. 最终效果如图</h5>

<p><blockquote><p><img src="/images/2012-08-15-displaying-attachments-and-due-date-within-email-when-a-issue-is-created/redmine_issue_add_email.png"></p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[申思维 @sg552sg552 meta ruby programming]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/08/14/shen-si-wei-at-sg552sg552-meta-ruby-programming/"/>
    <updated>2012-08-14T12:47:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/08/14/shen-si-wei-at-sg552sg552-meta-ruby-programming</id>
    <content type="html"><![CDATA[<p>申思维 @sg552sg552 非常热情，主动告知我 PPT 的下载地址，非常感谢！</p>

<p>参阅：</p>

<p>[北京][2012年08月11日] Ruby 活动公告+媒体资料+小结 » 社区 | Ruby China
<a href="http://ruby-china.org/topics/4662">http://ruby-china.org/topics/4662</a></p>

<p>PPT：meta programming ruby // Speaker Deck
<a href="https://speakerdeck.com/u/sg552sg552/p/meta-programming-ruby">https://speakerdeck.com/u/sg552sg552/p/meta-programming-ruby</a></p>

<p>MP3：<a href="http://vdisk.weibo.com/s/alUOz">http://vdisk.weibo.com/s/alUOz</a></p>

<p>一些总结：</p>

<!--more-->


<h5>1. const_set 和 const_get 操作常量的用法</h5>

<p><blockquote><p><img src="/images/2012-08-14-shen-si-wei-at-sg552sg552-meta-ruby-programming/core_methods.jpeg"></p></blockquote></p>

<h5>2. 举例子说明：动态方法的好处，减少代码冗余</h5>

<p><blockquote><p><img src="/images/2012-08-14-shen-si-wei-at-sg552sg552-meta-ruby-programming/refactoring.jpeg"></p></blockquote></p>

<h5>3. %Q{} 语法使用，表示一行字符串</h5>

<p><blockquote><p><img src="/images/2012-08-14-shen-si-wei-at-sg552sg552-meta-ruby-programming/basic_class_eval.jpeg"></p></blockquote></p>

<h5>4. class_variables，class_variable_defined? 和 <em>get, </em>set 方法的使用</h5>

<p><blockquote><p><img src="/images/2012-08-14-shen-si-wei-at-sg552sg552-meta-ruby-programming/basic_class_variables.jpeg"></p></blockquote></p>

<h5>5. remove_const 和 const_set 对常量的动态操作</h5>

<p><blockquote><p><img src="/images/2012-08-14-shen-si-wei-at-sg552sg552-meta-ruby-programming/substitude_class.jpeg"></p></blockquote></p>

<p>想了半天才明白，Symbal 估计实现 Symbal#to_proc 方法：</p>

<p>``` ruby
class Symbal
  def to_proc</p>

<pre><code>Proc.new { | x | x.send self }
</code></pre>

<p>  end
end
```</p>

<h5>6. 适合迭代中，对每一个其中的元素做一次 Symbal 对象对应的方法调用。</h5>

<p><blockquote><p><img src="/images/2012-08-14-shen-si-wei-at-sg552sg552-meta-ruby-programming/symbol_to_proc.jpeg"></p></blockquote></p>

<h5>7. stub 方法实现测试中 Mock 的功能，估计 stub 方法实现是通过 Module#define_method 重新定义了方法，返回代码块执行的结果。</h5>

<p><blockquote><p><img src="/images/2012-08-14-shen-si-wei-at-sg552sg552-meta-ruby-programming/symbol_to_proc.jpeg"></p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[元编程的魅力——反射机制 - 逸光 - (_2b || ! _2b).is_a? Question]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/08/13/the-metaprogramming-charm-reflection/"/>
    <updated>2012-08-13T21:20:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/08/13/the-metaprogramming-charm-reflection</id>
    <content type="html"><![CDATA[<p>  近期在准备 MetaProgramming Ruby 元编程的培训。除了 MetaProgramming Ruby 元编程这本书之外，想参阅一下其它资源，
作为培训 PPT 的补充。毕竟 MetaProgramming Ruby 元编程 虽然蕴含的知识量不小，但相比 Ruby 元编程本身，还是稍微有点薄。</p>

<p><a href="http://www.slideshare.net/fullscreen/ihower/designing-ruby-apis/">元编程的魅力——反射机制 - 逸光 - (<em>2b || ! </em>2b).is_a? Question</a> 的读后感：</p>

<!--more-->


<h3>1. is_a?, kind_of? 和 instace_of? 的区别</h3>

<p><blockquote><p>is_a?由Object类提供并接受一个参数，参数为类名的标识符（一个常量标识符），该方法用于确认对象是否为指定类的实例。区别与instance_of?，is_a?的判定条件比较宽松，ri提供的例子就足够详细了，让我们来看看吧。</p></p><p><p>```<br/>module M; end<br/>class A; include M; end<br/>class B &lt; A; end<br/>class C &lt; B; end</p></p><p><p>b = B.new<br/>b.instance_of? A  #=> false<br/>b.instance_of? B  #=> true<br/>b.instance_of? C  #=> false<br/>b.instance_of? M  #=> false</p></p><p><p>b.kind_of? A      #=> true<br/>b.kind_of? B      #=> true<br/>b.kind_of? C      #=> false<br/>b.kind_of? M      #=> true<br/>```</p></p><p><p>如果给定的类，是直接生成对象的类，那么，instance_of?方法才返回true。而如果是直接生成对象的类的父类或者引用的模块、父类引用的模块发，instance_of?就会无情的返回false。不过不要紧，kind_of?方法（is_a?方法也如此）会返回true的。</p></p><p><p></p></blockquote></p>

<h3>2. Module#included_modules 返回一个模块或类包含的模块</h3>

<p><blockquote><p>module类的实例方法included_modules 可以返回一个模块或类包含的模块（Class继承自Module，自然继承了此方法）。<br/><code><br/>irb(main):033:0]]&gt; B.included_modules<br/>=&gt; [M, Kernel]<br/></code><br/>Kernel模块，诚如教科书所写，他包含在每一个类或模块里，这样才使得Ruby中有了“函数”。</p></blockquote></p>

<h3>3. 而Object#singleton_methods方法同样以数组的方式返回对象的 eigenclass 方法</h3>

<p><blockquote><p>而Object#singleton_methods方法同样以数组的方式返回对象的单例方法（Singleton Method）。<br/><code><br/>irb(main):007:0&gt; Math.singleton_methods<br/>=&gt; [:atan2, :cos, :sin, :tan, :acos, :asin, :atan, :cosh, :sinh, :tanh, :acosh,:asinh, :atanh, :exp, :log, :log2, :log10, :sqrt, :cbrt, :frexp, :ldexp, :hypot, :erf, :erfc, :gamma, :lgamma]<br/></code></p></blockquote></p>

<h3>4. Fixnum 的对象和 Symbol 的对象一样不可变</h3>

<p><blockquote><p>使用object_id获取对象的一个全局id，可以用于确定对象是不是同一个对象。<br/>```<br/>irb(main):010:0]]&gt; 1.object_id == 1.object_id<br/>=> true</p></p><p><p>irb(main):011:0]]&gt; "obj".object_id == "obj".object_id<br/>=> false</p></p><p><p>irb(main):012:0]]&gt; :sym.object_id == :sym.object_id<br/>=> true<br/>```<br/>　　Fixnum类的实例都是立即数因此只有一个副本，Symbol类的对象也一样，但是其他类的可能就不一样咯~</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying to Github Pages]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/08/11/deploying-to-github-pages/"/>
    <updated>2012-08-11T23:13:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/08/11/deploying-to-github-pages</id>
    <content type="html"><![CDATA[<p>将 Octopress 部署到 GitHub，即同时支持 Hereku 和 GitHub。</p>

<p><blockquote><p>2012 年 8 月 14 日更新：</p></p><p><p>之前仅把 _deploy 目录的文件发布到 GitHub。但 Octopress's source 等其它目录并没有在 GitHub 中管理。</p></p><p><p>需要运行以下命令：</p></p><p><p>```<br/>blogbins-MacBook-Pro:octopress blogbin$ git remote add origin git@github.com:blogbin/tech-blogbin-blog-octopress.git<br/>blogbins-MacBook-Pro:octopress blogbin$ git config branch.master.remote</p></p><p><p>blogbins-MacBook-Pro:octopress blogbin$ git push origin master<br/>Counting objects: 5060, done.<br/>Delta compression using up to 2 threads.<br/>Compressing objects: 100% (2316/2316), done.<br/>Writing objects: 100% (5060/5060), 1.11 MiB, done.<br/>Total 5060 (delta 2872), reused 3968 (delta 2289)<br/>To git@github.com:blogbin/tech-blogbin-blog-octopress.git<br/> * [new branch]      master -> master<br/>```</p></p><p><p></p></blockquote></p>

<p><blockquote><p>2012 年 8 月 13 日更新：</p></p><p><p>Heroku 采用二级域名方式部署，如 http://tech-blogbin.herokuapp.com/，<br/>但 GitHub 采用子目录方式部署，如 http://blogbin.github.com/tech-blogbin-blog/，</p></p><p><p>支持 GitHub 部署后，Rakefile 和 config.rb 都有改动，造成运行 rake generate 时，编译输出的静态页面在 public/tech-blogbin-blog 目录下，而非之前 Heroku 的 public 目录下。这造成 Heroku 和 GitHub 网站内容不一致。</p></p><p><p>临时解决办法是，通过 ln 或者 ln -s 确保 public 和 public/tech-blogbin-blog 内容保持一致。</p></p><p><p>提供以下 shell 脚本:<br/><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (ln_public.sh)</span> <a href='/downloads/code/shell/octopress/ln_public.sh'>download</a></figcaption><br/> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br/><span class='line-number'>2</span><br/><span class='line-number'>3</span><br/><span class='line-number'>4</span><br/><span class='line-number'>5</span><br/><span class='line-number'>6</span><br/><span class='line-number'>7</span><br/><span class='line-number'>8</span><br/><span class='line-number'>9</span><br/><span class='line-number'>10</span><br/><span class='line-number'>11</span><br/><span class='line-number'>12</span><br/><span class='line-number'>13</span><br/><span class='line-number'>14</span><br/><span class='line-number'>15</span><br/><span class='line-number'>16</span><br/><span class='line-number'>17</span><br/><span class='line-number'>18</span><br/><span class='line-number'>19</span><br/><span class='line-number'>20</span><br/><span class='line-number'>21</span><br/><span class='line-number'>22</span><br/><span class='line-number'>23</span><br/><span class='line-number'>24</span><br/><span class='line-number'>25</span><br/><span class='line-number'>26</span><br/><span class='line-number'>27</span><br/><span class='line-number'>28</span><br/><span class='line-number'>29</span><br/></pre></td><td class='code'><pre><code class='sh'><span class='line'>rm -r public/blog<br/></span><span class='line'>ln -s public/tech-blogbin-blog/blog public/blog<br/></span><span class='line'><br/></span><span class='line'>rm -r public/assets<br/></span><span class='line'>ln -s public/tech-blogbin-blog/assets public/assets<br/></span><span class='line'><br/></span><span class='line'>rm -r public/CNAME<br/></span><span class='line'>ln public/tech-blogbin-blog/CNAME public/CNAME<br/></span><span class='line'><br/></span><span class='line'>rm -r public/atom.xml<br/></span><span class='line'>ln public/tech-blogbin-blog/atom.xml public/atom.xml<br/></span><span class='line'><br/></span><span class='line'>rm -r public/favicon.png<br/></span><span class='line'>ln public/tech-blogbin-blog/favicon.png public/favicon.png<br/></span><span class='line'><br/></span><span class='line'>rm -r public/images<br/></span><span class='line'>ln -s public/tech-blogbin-blog/images public/images<br/></span><span class='line'><br/></span><span class='line'>rm -r public/index.html<br/></span><span class='line'>ln public/tech-blogbin-blog/index.html public/index.html<br/></span><span class='line'><br/></span><span class='line'>rm -r public/javascripts<br/></span><span class='line'>ln -s public/tech-blogbin-blog/javascripts public/javascripts<br/></span><span class='line'><br/></span><span class='line'>rm -r public/sitemap.xml<br/></span><span class='line'>ln public/tech-blogbin-blog/sitemap.xml public/sitemap.xml<br/></span><span class='line'><br/></span><span class='line'>rm -r public/stylesheets<br/></span><span class='line'>ln -s public/tech-blogbin-blog/stylesheets public/stylesheets<br/></span></code></pre></td></tr></table></div></figure></notextile></div></p></p><p><p>运行 ./ln_public.sh</p></p><p><p>```<br/>blogbins-MacBook-Pro:octopress blogbin$ pwd<br/>/Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress<br/>blogbins-MacBook-Pro:octopress blogbin$ chmod 700 ln_public.sh</p></p><p><p>blogbins-MacBook-Pro:octopress blogbin$ ./ln_public.sh<br/>```</p></p><p><p></p></blockquote></p>

<p>Octopress 官方网站有文档详细说明，因此过程比较顺利。</p>

<!--more-->


<p>一. 前期准备</p>

<p>参阅：</p>

<p><a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a></p>

<p>二. 部署过程</p>

<p>先将本地 Octopress 备份</p>

<p>```
blogbins-MacBook-Pro:octopress blogbin$ pwd
/Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress</p>

<p>blogbins-MacBook-Pro:octopress blogbin$ cd ..
blogbins-MacBook-Pro:tech.blogbin blogbin$ ls
octopress
blogbins-MacBook-Pro:tech.blogbin blogbin$ cp -r octopress octopress.20120811
blogbins-MacBook-Pro:tech.blogbin blogbin$ ls
octopress       octopress.20120811</p>

<p>```</p>

<p>```
blogbins-MacBook-Pro:tech.blogbin blogbin$ cd octopress
Using /Users/blogbin/.rvm/gems/ruby-1.9.3-p0 with gemset octopress</p>

<p>blogbins-MacBook-Pro:octopress blogbin$ rake setup_github_pages
Enter the read/write url for your repository
(For example, 'git@github.com:your_username/your_username.github.com)
Repository url: git@github.com:blogbin/tech-blogbin-blog.git
rm -rf public
mkdir -p public/tech-blogbin-blog</p>

<h2>Site's root directory is now '/tech-blogbin-blog'</h2>

<p>rm -rf <em>deploy
mkdir </em>deploy
cd <em>deploy
Initialized empty Git repository in /Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress/</em>deploy/.git/
[master (root-commit) 4dda66a] Octopress init
 1 file changed, 1 insertion(+)
 create mode 100644 index.html
cd -</p>

<hr />

<h2>Now you can deploy to http://blogbin.github.com/tech-blogbin-blog with <code>rake deploy</code></h2>

<p>blogbins-MacBook-Pro:octopress blogbin$ rake generate</p>

<h2>Generating Site with Jekyll</h2>

<p>   remove .sass-cache/
   remove source/stylesheets/screen.css
   create source/stylesheets/screen.css
/Users/blogbin/.rvm/gems/ruby-1.9.3-p0@octopress/gems/maruku-0.6.0/lib/maruku/input/parse_doc.rb:22:in `<top (required)>': iconv will be deprecated in the future, use String#encode instead.
Configuration from /Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress/_config.yml
Building site: source -> public/tech-blogbin-blog
Successfully generated site: source -> public/tech-blogbin-blog</p>

<p>blogbins-MacBook-Pro:octopress blogbin$ git status</p>

<h1>On branch master</h1>

<h1>Changes not staged for commit:</h1>

<h1>(use "git add <file>..." to update what will be committed)</h1>

<h1>(use "git checkout -- <file>..." to discard changes in working directory)</h1>

<p>#</p>

<h1>modified:   Rakefile</h1>

<h1>modified:   _config.yml</h1>

<h1>modified:   config.rb</h1>

<h1>modified:   public/atom.xml</h1>

<h1>modified:   public/blog/2012/08/11/configuring-octopress-with-3rd-party-settings/index.html</h1>

<h1>modified:   public/blog/2012/08/11/how-to-install-octopress-on-heroku/index.html</h1>

<h1>modified:   public/blog/archives/index.html</h1>

<h1>modified:   public/blog/categories/configuration/atom.xml</h1>

<h1>modified:   public/blog/categories/configuration/index.html</h1>

<h1>modified:   public/blog/categories/heroku/atom.xml</h1>

<h1>modified:   public/blog/categories/heroku/index.html</h1>

<h1>modified:   public/blog/categories/installation/atom.xml</h1>

<h1>modified:   public/blog/categories/installation/index.html</h1>

<h1>modified:   public/blog/categories/octopress/atom.xml</h1>

<h1>modified:   public/blog/categories/octopress/index.html</h1>

<h1>modified:   public/blog/categories/ruby/atom.xml</h1>

<h1>modified:   public/blog/categories/ruby/index.html</h1>

<h1>modified:   public/index.html</h1>

<h1>modified:   public/stylesheets/screen.css</h1>

<p>#</p>

<h1>Untracked files:</h1>

<h1>(use "git add <file>..." to include in what will be committed)</h1>

<p>#</p>

<h1>public/tech-blogbin-blog/</h1>

<p>no changes added to commit (use "git add" and/or "git commit -a")</p>

<p>```</p>

<p>git://github.com/imathis/octopress.git 已经有 origin 改为 octopress</p>

<p>```</p>

<p>blogbins-MacBook-Pro:octopress blogbin$ git remote -v
heroku  git@heroku.com:tech-blogbin.git (fetch)
heroku  git@heroku.com:tech-blogbin.git (push)
octopress   git://github.com/imathis/octopress.git (fetch)
octopress   git://github.com/imathis/octopress.git (push)</p>

<p>```</p>

<p>本地机器已经存在公钥 id_rsa.pub ，但没有添加到 GitHub。
直接运行 rake deploy 提交会出现最后面的错误：Permission denied (publickey).</p>

<p><code>
blogbins-MacBook-Pro:octopress blogbin$ ls ~/.ssh/ | grep id_rsa
id_rsa      id_rsa.pub
</code></p>

<p>需要将本地机器 公钥 id_rsa.pub 提交到 GitHub
参阅：</p>

<p><a href="https://help.github.com/articles/generating-ssh-keys">https://help.github.com/articles/generating-ssh-keys</a></p>

<p>并 skip to Step 4.</p>

<p><code>
blogbins-MacBook-Pro:octopress blogbin$ pbcopy &lt; ~/.ssh/id_rsa.pub
</code></p>

<p>运行 rake deploy 部署至 GitHub。</p>

<p>```
blogbins-MacBook-Pro:octopress blogbin$ rake deploy</p>

<h2>Deploying branch to Github Pages</h2>

<p>rm -rf <em>deploy/assets
rm -rf </em>deploy/atom.xml
rm -rf <em>deploy/blog
rm -rf </em>deploy/favicon.png
rm -rf <em>deploy/images
rm -rf </em>deploy/index.html
rm -rf <em>deploy/javascripts
rm -rf </em>deploy/sitemap.xml
rm -rf _deploy/stylesheets</p>

<h2>copying public/tech-blogbin-blog to _deploy</h2>

<p>cp -r public/tech-blogbin-blog/. <em>deploy
cd </em>deploy</p>

<h2>Commiting: Site updated at 2012-08-11 13:47:38 UTC</h2>

<h1>On branch gh-pages</h1>

<p>nothing to commit (working directory clean)</p>

<h2>Pushing generated _deploy website</h2>

<p>Counting objects: 102, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (92/92), done.
Writing objects: 100% (102/102), 204.84 KiB, done.
Total 102 (delta 13), reused 0 (delta 0)
To git@github.com:blogbin/tech-blogbin-blog.git
 * [new branch]      gh-pages -> gh-pages</p>

<h2>Github Pages deploy complete</h2>

<p>cd -</p>

<p>```</p>

<p>向本地仓库提交变更。</p>

<p>```</p>

<p>blogbins-MacBook-Pro:octopress blogbin$ git status</p>

<h1>On branch master</h1>

<h1>Changes not staged for commit:</h1>

<h1>(use "git add <file>..." to update what will be committed)</h1>

<h1>(use "git checkout -- <file>..." to discard changes in working directory)</h1>

<p>#</p>

<h1>modified:   Rakefile</h1>

<h1>modified:   _config.yml</h1>

<h1>modified:   config.rb</h1>

<h1>modified:   public/atom.xml</h1>

<h1>modified:   public/blog/2012/08/11/configuring-octopress-with-3rd-party-settings/index.html</h1>

<h1>modified:   public/blog/2012/08/11/how-to-install-octopress-on-heroku/index.html</h1>

<h1>modified:   public/blog/archives/index.html</h1>

<h1>modified:   public/blog/categories/configuration/atom.xml</h1>

<h1>modified:   public/blog/categories/configuration/index.html</h1>

<h1>modified:   public/blog/categories/heroku/atom.xml</h1>

<h1>modified:   public/blog/categories/heroku/index.html</h1>

<h1>modified:   public/blog/categories/installation/atom.xml</h1>

<h1>modified:   public/blog/categories/installation/index.html</h1>

<h1>modified:   public/blog/categories/octopress/atom.xml</h1>

<h1>modified:   public/blog/categories/octopress/index.html</h1>

<h1>modified:   public/blog/categories/ruby/atom.xml</h1>

<h1>modified:   public/blog/categories/ruby/index.html</h1>

<h1>modified:   public/index.html</h1>

<h1>modified:   public/stylesheets/screen.css</h1>

<p>#</p>

<h1>Untracked files:</h1>

<h1>(use "git add <file>..." to include in what will be committed)</h1>

<p>#</p>

<h1>public/tech-blogbin-blog/</h1>

<p>no changes added to commit (use "git add" and/or "git commit -a")
blogbins-MacBook-Pro:octopress blogbin$ git add .
blogbins-MacBook-Pro:octopress blogbin$ git commit -m 'update Github'
[master de0f825] update Github
 92 files changed, 11202 insertions(+), 47 deletions(-)
 rewrite public/stylesheets/screen.css (95%)
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/background.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/blankButton.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/divider.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/fullscreenButton.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/fullscreenButtonOver.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/muteButton.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/muteButtonOver.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/normalscreenButton.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/normalscreenButtonOver.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/pauseButton.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/pauseButtonOver.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/playButton.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/playButtonOver.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/timeSliderBuffer.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/timeSliderCapLeft.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/timeSliderCapRight.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/timeSliderProgress.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/timeSliderRail.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/unmuteButton.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/controlbar/unmuteButtonOver.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/display/background.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/display/bufferIcon.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/display/muteIcon.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/display/playIcon.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/dock/button.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/glow.xml
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/playlist/item.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/playlist/itemOver.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/playlist/sliderCapBottom.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/playlist/sliderCapTop.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/playlist/sliderRail.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/playlist/sliderThumb.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/sharing/embedIcon.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/sharing/embedScreen.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/sharing/shareIcon.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/glow/sharing/shareScreen.png
 create mode 100644 public/tech-blogbin-blog/assets/jwplayer/player.swf
 create mode 100644 public/tech-blogbin-blog/atom.xml
 create mode 100644 public/tech-blogbin-blog/blog/2012/08/11/configuring-octopress-with-3rd-party-settings/index.html
 create mode 100644 public/tech-blogbin-blog/blog/2012/08/11/how-to-install-octopress-on-heroku/index.html
 create mode 100644 public/tech-blogbin-blog/blog/archives/index.html
 create mode 100644 public/tech-blogbin-blog/blog/categories/configuration/atom.xml
 create mode 100644 public/tech-blogbin-blog/blog/categories/configuration/index.html
 create mode 100644 public/tech-blogbin-blog/blog/categories/heroku/atom.xml
 create mode 100644 public/tech-blogbin-blog/blog/categories/heroku/index.html
 create mode 100644 public/tech-blogbin-blog/blog/categories/installation/atom.xml
 create mode 100644 public/tech-blogbin-blog/blog/categories/installation/index.html
 create mode 100644 public/tech-blogbin-blog/blog/categories/octopress/atom.xml
 create mode 100644 public/tech-blogbin-blog/blog/categories/octopress/index.html
 create mode 100644 public/tech-blogbin-blog/blog/categories/ruby/atom.xml
 create mode 100644 public/tech-blogbin-blog/blog/categories/ruby/index.html
 create mode 100644 public/tech-blogbin-blog/favicon.png
 create mode 100644 public/tech-blogbin-blog/images/bird_32_gray.png
 create mode 100644 public/tech-blogbin-blog/images/bird_32_gray_fail.png
 create mode 100644 public/tech-blogbin-blog/images/code_bg.png
 create mode 100644 public/tech-blogbin-blog/images/dotted-border.png
 create mode 100644 public/tech-blogbin-blog/images/email.png
 create mode 100644 public/tech-blogbin-blog/images/line-tile.png
 create mode 100644 public/tech-blogbin-blog/images/noise.png
 create mode 100644 public/tech-blogbin-blog/images/rss.png
 create mode 100644 public/tech-blogbin-blog/images/search.png
 create mode 100644 public/tech-blogbin-blog/index.html
 create mode 100644 public/tech-blogbin-blog/javascripts/ender.js
 create mode 100644 public/tech-blogbin-blog/javascripts/github.js
 create mode 100644 public/tech-blogbin-blog/javascripts/libs/ender.js
 create mode 100644 public/tech-blogbin-blog/javascripts/libs/jXHR.js
 create mode 100644 public/tech-blogbin-blog/javascripts/libs/swfobject-dynamic.js
 create mode 100644 public/tech-blogbin-blog/javascripts/modernizr-2.0.js
 create mode 100644 public/tech-blogbin-blog/javascripts/octopress.js
 create mode 100644 public/tech-blogbin-blog/javascripts/pinboard.js
 create mode 100644 public/tech-blogbin-blog/javascripts/twitter.js
 create mode 100644 public/tech-blogbin-blog/sitemap.xml
 create mode 100644 public/tech-blogbin-blog/stylesheets/screen.css</p>

<p>```</p>

<p>三. 问题</p>

<ol>
<li>错误：Permission denied (publickey).</li>
</ol>


<p>```
blogbins-MacBook-Pro:octopress blogbin$ rake deploy</p>

<h2>Deploying branch to Github Pages</h2>

<p>rm -rf _deploy/index.html</p>

<h2>copying public/tech-blogbin-blog to _deploy</h2>

<p>cp -r public/tech-blogbin-blog/. <em>deploy
cd </em>deploy</p>

<h2>Commiting: Site updated at 2012-08-11 13:41:36 UTC</h2>

<p>[gh-pages 68c6a21] Site updated at 2012-08-11 13:41:36 UTC
 73 files changed, 11155 insertions(+), 1 deletion(-)
 create mode 100644 assets/jwplayer/glow/controlbar/background.png
 create mode 100644 assets/jwplayer/glow/controlbar/blankButton.png
 create mode 100644 assets/jwplayer/glow/controlbar/divider.png
 create mode 100644 assets/jwplayer/glow/controlbar/fullscreenButton.png
 create mode 100644 assets/jwplayer/glow/controlbar/fullscreenButtonOver.png
 create mode 100644 assets/jwplayer/glow/controlbar/muteButton.png
 create mode 100644 assets/jwplayer/glow/controlbar/muteButtonOver.png
 create mode 100644 assets/jwplayer/glow/controlbar/normalscreenButton.png
 create mode 100644 assets/jwplayer/glow/controlbar/normalscreenButtonOver.png
 create mode 100644 assets/jwplayer/glow/controlbar/pauseButton.png
 create mode 100644 assets/jwplayer/glow/controlbar/pauseButtonOver.png
 create mode 100644 assets/jwplayer/glow/controlbar/playButton.png
 create mode 100644 assets/jwplayer/glow/controlbar/playButtonOver.png
 create mode 100644 assets/jwplayer/glow/controlbar/timeSliderBuffer.png
 create mode 100644 assets/jwplayer/glow/controlbar/timeSliderCapLeft.png
 create mode 100644 assets/jwplayer/glow/controlbar/timeSliderCapRight.png
 create mode 100644 assets/jwplayer/glow/controlbar/timeSliderProgress.png
 create mode 100644 assets/jwplayer/glow/controlbar/timeSliderRail.png
 create mode 100644 assets/jwplayer/glow/controlbar/unmuteButton.png
 create mode 100644 assets/jwplayer/glow/controlbar/unmuteButtonOver.png
 create mode 100644 assets/jwplayer/glow/display/background.png
 create mode 100644 assets/jwplayer/glow/display/bufferIcon.png
 create mode 100644 assets/jwplayer/glow/display/muteIcon.png
 create mode 100644 assets/jwplayer/glow/display/playIcon.png
 create mode 100644 assets/jwplayer/glow/dock/button.png
 create mode 100644 assets/jwplayer/glow/glow.xml
 create mode 100644 assets/jwplayer/glow/playlist/item.png
 create mode 100644 assets/jwplayer/glow/playlist/itemOver.png
 create mode 100644 assets/jwplayer/glow/playlist/sliderCapBottom.png
 create mode 100644 assets/jwplayer/glow/playlist/sliderCapTop.png
 create mode 100644 assets/jwplayer/glow/playlist/sliderRail.png
 create mode 100644 assets/jwplayer/glow/playlist/sliderThumb.png
 create mode 100644 assets/jwplayer/glow/sharing/embedIcon.png
 create mode 100644 assets/jwplayer/glow/sharing/embedScreen.png
 create mode 100644 assets/jwplayer/glow/sharing/shareIcon.png
 create mode 100644 assets/jwplayer/glow/sharing/shareScreen.png
 create mode 100644 assets/jwplayer/player.swf
 create mode 100644 atom.xml
 create mode 100644 blog/2012/08/11/configuring-octopress-with-3rd-party-settings/index.html
 create mode 100644 blog/2012/08/11/how-to-install-octopress-on-heroku/index.html
 create mode 100644 blog/archives/index.html
 create mode 100644 blog/categories/configuration/atom.xml
 create mode 100644 blog/categories/configuration/index.html
 create mode 100644 blog/categories/heroku/atom.xml
 create mode 100644 blog/categories/heroku/index.html
 create mode 100644 blog/categories/installation/atom.xml
 create mode 100644 blog/categories/installation/index.html
 create mode 100644 blog/categories/octopress/atom.xml
 create mode 100644 blog/categories/octopress/index.html
 create mode 100644 blog/categories/ruby/atom.xml
 create mode 100644 blog/categories/ruby/index.html
 create mode 100644 favicon.png
 create mode 100644 images/bird_32_gray.png
 create mode 100644 images/bird_32_gray_fail.png
 create mode 100644 images/code_bg.png
 create mode 100644 images/dotted-border.png
 create mode 100644 images/email.png
 create mode 100644 images/line-tile.png
 create mode 100644 images/noise.png
 create mode 100644 images/rss.png
 create mode 100644 images/search.png
 rewrite index.html (100%)
 create mode 100644 javascripts/ender.js
 create mode 100644 javascripts/github.js
 create mode 100644 javascripts/libs/ender.js
 create mode 100644 javascripts/libs/jXHR.js
 create mode 100644 javascripts/libs/swfobject-dynamic.js
 create mode 100644 javascripts/modernizr-2.0.js
 create mode 100644 javascripts/octopress.js
 create mode 100644 javascripts/pinboard.js
 create mode 100644 javascripts/twitter.js
 create mode 100644 sitemap.xml
 create mode 100644 stylesheets/screen.css</p>

<h2>Pushing generated _deploy website</h2>

<p>Permission denied (publickey).
fatal: The remote end hung up unexpectedly</p>

<h2>Github Pages deploy complete</h2>

<p>cd -</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Octopress with 3rd Party Settings]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/08/11/configuring-octopress-with-3rd-party-settings/"/>
    <updated>2012-08-11T17:11:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/08/11/configuring-octopress-with-3rd-party-settings</id>
    <content type="html"><![CDATA[<p>为 Octopress 配置 Disqus 留言，Github, Twitter, Google+, Google Analytics 和 Facebook。
Google 搜索结果并不多，那是因为在 Octopress 很容易配置，几乎不需要求助。</p>

<!--more-->


<p>一. 前期准备</p>

<p>参阅：
<a href="http://octopress.org/docs/configuring/">http://octopress.org/docs/configuring/</a></p>

<p>Github - List your github repositories in the sidebar</p>

<p>Twitter - Setup a sidebar twitter feed, follow button, and tweet button (for sharing posts and pages).</p>

<p>Google Plus One - Setup sharing for posts and pages on Google’s plus one network.</p>

<p>Pinboard - Share your recent Pinboard bookmarks in the sidebar.</p>

<p>Delicious - Share your recent Delicious bookmarks in the sidebar.</p>

<p>Disqus Comments - Add your disqus short name to enable disqus comments on your site.</p>

<p>Google Analytics - Add your tracking id to enable Google Analytics tracking for your site.</p>

<p>Facebook - Add a Facebook like button</p>

<p>二. 配置过程</p>

<p>_config.yml 配置文件如下：</p>

<p>```
blogbins-MacBook-Pro:octopress blogbin$ pwd
/Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress
blogbins-MacBook-Pro:octopress blogbin$  vi _config.yml</p>

<h1>-----------------------</h1>

<h1>Main Configs</h1>

<h1>-----------------------</h1>

<p>url: http://tech-blogbin.herokuapp.com/
title: Tech.Blogbin's Blog
subtitle: A blogging for geeker.
author: Tech Blogbin <a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#116;&#x65;&#99;&#x68;&#46;&#98;&#108;&#111;&#103;&#x62;&#105;&#x6e;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#109;">&#116;&#x65;&#x63;&#104;&#46;&#98;&#108;&#111;&#103;&#x62;&#105;&#x6e;&#64;&#103;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a>
simple_search: http://google.com/search
description:</p>

<h1>Default date format is "ordinal" (resulting in "July 22nd 2007")</h1>

<h1>You can customize the format as defined in</h1>

<h1>http://www.ruby-doc.org/core-1.9.2/Time.html#method-i-strftime</h1>

<h1>Additionally, %o will give you the ordinal representation of the day</h1>

<p>date_format: "ordinal"</p>

<h1>RSS / Email (optional) subscription links (change if using something like Feedburner)</h1>

<p>subscribe_rss: /atom.xml
subscribe_email:</p>

<h1>RSS feeds can list your email address if you like</h1>

<p>email:</p>

<h1>-----------------------</h1>

<h1>Jekyll &amp; Plugins</h1>

<h1>-----------------------</h1>

<h1>If publishing to a subdirectory as in http://site.com/project set 'root: /project'</h1>

<p>root: /
permalink: /blog/:year/:month/:day/:title/
source: source
destination: public
plugins: plugins
code_dir: downloads/code
category_dir: blog/categories
markdown: rdiscount
pygments: false # default python pygments have been replaced by pygments.rb</p>

<p>paginate: 10          # Posts per page on the blog index
pagination_dir: blog  # Directory base for pagination URLs eg. /blog/page/2/
recent_posts: 5       # Posts in the sidebar Recent Posts section
excerpt_link: "Read on &rarr;"  # "Continue reading" link text at the bottom of excerpted articles</p>

<p>titlecase: true       # Converts page and post titles to titlecase</p>

<h1>list each of the sidebar modules you want to include, in the order you want them to appear.</h1>

<h1>To add custom asides, create files in /source/_includes/custom/asides/ and add them to the list like 'custom/asides/custom_aside_name.html'</h1>

<p>default_asides: [asides/recent_posts.html, asides/github.html, asides/twitter.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]</p>

<h1>Each layout uses the default asides, but they can have their own asides instead. Simply uncomment the lines below</h1>

<h1>and add an array with the asides you want to use.</h1>

<h1>blog_index_asides:</h1>

<h1>post_asides:</h1>

<h1>page_asides:</h1>

<h1>-----------------------</h1>

<h1>3rd Party Settings</h1>

<h1>-----------------------</h1>

<h1>Github repositories</h1>

<p>github_user: blogbin
github_repo_count: 0
github_show_profile_link: true
github_skip_forks: true</p>

<h1>Twitter</h1>

<p>twitter_user: tech_blogbin
twitter_tweet_count: 4
twitter_show_replies: true
twitter_follow_button: true
twitter_show_follower_count: true
twitter_tweet_button: true</p>

<h1>Google +1</h1>

<p>google_plus_one: true
google_plus_one_size: medium</p>

<h1>Google Plus Profile</h1>

<h1>Hidden: No visible button, just add author information to search results</h1>

<p>googleplus_user: tech.blogbin@gmail.com
googleplus_hidden: false</p>

<h1>Pinboard</h1>

<p>pinboard_user:
pinboard_count: 3</p>

<h1>Delicious</h1>

<p>delicious_user:
delicious_count: 3</p>

<h1>Disqus Comments</h1>

<p>disqus_short_name: tech-blogbin-blog
disqus_show_comment_count: true</p>

<h1>Google Analytics</h1>

<p>google_analytics_tracking_id: UA-34029049-1</p>

<h1>Facebook Like</h1>

<p>facebook_like: true
```</p>

<p>注意，修改 _config.yml 等配置文件，必须重新编译生成静态文件，否则不会生效。</p>

<p>```
blogbins-MacBook-Pro:octopress blogbin$ rake generate</p>

<h2>Generating Site with Jekyll</h2>

<p>unchanged sass/screen.scss
/Users/blogbin/.rvm/gems/ruby-1.9.3-p0@octopress/gems/maruku-0.6.0/lib/maruku/input/parse_doc.rb:22:in `<top (required)>': iconv will be deprecated in the future, use String#encode instead.
Configuration from /Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress/_config.yml
Building site: source -> public
Successfully generated site: source -> public
```</p>

<p>后推送到远端服务器</p>

<p>三. 问题</p>

<ol>
<li>markdown 文件中在代码片段中错误指定语法格式，造成 rake generate 运行失效。</li>
</ol>


<p>rake watch 和 rake preview 编译不会报错，所以发现改动一直没有更新，运行 rake generate 强制编译。</p>

<p>```</p>

<h3>```Bash shell scripts</h3>

<p>blogbins-MacBook-Pro:octopress blogbin$ rake generate
```</p>

<p>报错信息如下：</p>

<p>```</p>

<h2>Generating Site with Jekyll</h2>

<p>unchanged sass/screen.scss
/Users/blogbin/.rvm/gems/ruby-1.9.3-p0@octopress/gems/maruku-0.6.0/lib/maruku/input/parse_doc.rb:22:in <code>&lt;top (required)&gt;': iconv will be deprecated in the future, use String#encode instead.
Configuration from /Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress/_config.yml
Building site: source -&gt; public
/Users/blogbin/.rvm/gems/ruby-1.9.3-p0@octopress/gems/rubypython-0.5.3/lib/rubypython/rubypyproxy.rb:198:in</code>method_missing': ClassNotFound: no lexer for alias 'Bash' found (RubyPython::PythonError)</p>

<pre><code> from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@octopress/gems/pygments.rb-0.2.13/lib/pygments/ffi.rb:135:in `lexer_for'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@octopress/gems/pygments.rb-0.2.13/lib/pygments/ffi.rb:91:in `highlight'
 from /Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress/plugins/pygments_code.rb:24:in `pygments'
 from /Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress/plugins/pygments_code.rb:14:in `highlight'
 from /Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress/plugins/backtick_code_block.rb:37:in `block in render_code_block'
 from /Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress/plugins/backtick_code_block.rb:13:in `gsub'
 from /Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress/plugins/backtick_code_block.rb:13:in `render_code_block'
 from /Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress/plugins/octopress_filters.rb:12:in `pre_filter'
 from /Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress/plugins/octopress_filters.rb:28:in `pre_render'
 from /Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress/plugins/post_filters.rb:112:in `block in pre_render'
 from /Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress/plugins/post_filters.rb:111:in `each'
 from /Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress/plugins/post_filters.rb:111:in `pre_render'
 from /Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress/plugins/post_filters.rb:166:in `do_layout'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@octopress/gems/jekyll-0.11.2/lib/jekyll/post.rb:189:in `render'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@octopress/gems/jekyll-0.11.2/lib/jekyll/site.rb:193:in `block in render'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@octopress/gems/jekyll-0.11.2/lib/jekyll/site.rb:192:in `each'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@octopress/gems/jekyll-0.11.2/lib/jekyll/site.rb:192:in `render'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@octopress/gems/jekyll-0.11.2/lib/jekyll/site.rb:40:in `process'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@octopress/gems/jekyll-0.11.2/bin/jekyll:250:in `&lt;top (required)&gt;'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@octopress/bin/jekyll:19:in `load'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@octopress/bin/jekyll:19:in `&lt;main&gt;'
</code></pre>

<p>blogbins-MacBook-Pro:octopress blogbin$ rake generate</p>

<h2>Generating Site with Jekyll</h2>

<p>unchanged sass/screen.scss
/Users/blogbin/.rvm/gems/ruby-1.9.3-p0@octopress/gems/maruku-0.6.0/lib/maruku/input/parse_doc.rb:22:in `<top (required)>': iconv will be deprecated in the future, use String#encode instead.
Configuration from /Users/blogbin/projects/workspaces/octopress/tech.blogbin/octopress/_config.yml
Building site: source -> public
Successfully generated site: source -> public
```</p>
]]></content>
  </entry>
  
</feed>
