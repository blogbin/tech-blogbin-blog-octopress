<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Tech.Blogbin's Blog]]></title>
  <link href="http://tech-blog.blogbin.info/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://tech-blog.blogbin.info/"/>
  <updated>2012-08-23T13:01:47+08:00</updated>
  <id>http://tech-blog.blogbin.info/</id>
  <author>
    <name><![CDATA[Tech Blogbin ]]></name>
    <email><![CDATA[Tech Blogbin <tech.blogbin@gmail.com>]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using binarylogic/settingslogic]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/08/22/using-binarylogic-slash-settingslogic/"/>
    <updated>2012-08-22T22:00:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/08/22/using-binarylogic-slash-settingslogic</id>
    <content type="html"><![CDATA[<p>Rails 项目中有一些全局配置信息需要保存在文件中，采用 binarylogic/settingslogic 来管理这些配置信息：</p>

<p>参阅：</p>

<p>binarylogic/settingslogic <a href="https://github.com/binarylogic/settingslogic">https://github.com/binarylogic/settingslogic</a></p>

<p>介紹 Settingslogic | Beryllium Work <a href="http://blog.berylliumwork.com/2012/02/settingslogic.html">http://blog.berylliumwork.com/2012/02/settingslogic.html</a></p>

<p>假设 config 有配置文件：
``` ruby settings.yml
default: *default
  server_url:</p>

<pre><code>check_sensitive_data: "http://localhst:3000/bad_word_checker/check.json"
</code></pre>

<p>development:
  &lt;&lt;: *default
  server_url:</p>

<pre><code>check_sensitive_data: "http://localhst:3001/bad_word_checker/check.json" 
</code></pre>

<p>test:
  &lt;&lt;: *default
  server_url:</p>

<pre><code>check_sensitive_data: "http://localhst:3002/bad_word_checker/check.json" 
</code></pre>

<p>production:
  &lt;&lt;: *default
  server_url:</p>

<pre><code>check_sensitive_data: "http://localhst:3003/bad_word_checker/check.json" 
</code></pre>

<p>```</p>

<!--more-->


<p>访问配置信息的代码比较丑陋，如
``` ruby settings.rb
SYS_CONFIG = YAML.load_file(Rails.root.join("config/sys_config.yml"))[Rails.env]</p>

<p>puts SYS_CONFIG["server_url"]["check_sensitive_data"]     # => "http://localhst:3001/bad_word_checker/check.json"
```</p>

<p>如果采用 settingslogic，先创建 settings.rb 文件
``` ruby app/model/settings.rb</p>

<h1>encoding: UTF-8</h1>

<h1>binarylogic/settingslogic</h1>

<h1>https://github.com/binarylogic/settingslogic</h1>

<p>class Settings &lt; Settingslogic
  source "#{Rails.root}/config/settings.yml"
  namespace Rails.env
end
```</p>

<p>通过 Settings 来访问配置信息，如：
<code>ruby
puts Settings.server_url.check_sensitive_data    # =&gt; "http://localhst:3001/bad_word_checker/check.json"
</code></p>

<p>看看，不需要指定 yml 文件和 env 环境，非常容易。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 返回 json 格式的内容]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/08/20/dhhs-json-jbuilder-at-rails/"/>
    <updated>2012-08-20T23:51:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/08/20/dhhs-json-jbuilder-at-rails</id>
    <content type="html"><![CDATA[<p>需要在 Rails 返回 json 格式的内容。虽然 Ruby 或者 Rails 内置对对象转为 json 的支持。
但对于自定义的 json 格式和内容。 推荐使用 DHH 开发的Gem：</p>

<p>rails/jbuilder
<a href="https://github.com/rails/jbuilder">https://github.com/rails/jbuilder</a></p>

<p>RailsCasts 网站有一份教程，可以作为学习的补充
320 Jbuilder - RailsCasts
<a href="http://railscasts.com/episodes/320-jbuilder?view=asciicast">http://railscasts.com/episodes/320-jbuilder?view=asciicast</a></p>

<p>其实之前已经使用 ails/jbuilder 返回 json 格式内容，但一段时间没用，结果又碰到同样问题。</p>

<p>访问 url 时，系统后台报错：
undefined local variable or method `json'</p>

<p>结果发现，原来是 渲染的模版扩展名不小心写错了，正确的是 .json.jbuilder；
而我不小心写成了 .json.builder（xml 格式渲染模版的扩展名）。</p>

<p><code>``
Started GET "/security/authorizations/lookup.json" for 127.0.0.1 at 2012-08-20 23:38:40 +0800
ActionView::Template::Error - undefined local variable or method</code>json' for #&lt;#&lt;Class:0x007fde54624320>:0x007fde5461e6a0>:</p>

<pre><code> /Users/blogbin/projects/workspaces/app_store/ruby/xbmc/app/views/security/authorizations/lookup.json.builder:2:in `_app_views_security_authorizations_lookup_json_builder___4549964192266964499_70296437709400'
 /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/actionpack-3.1.0/lib/action_view/template.rb:144:in `block in render'
 /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/activesupport-3.1.0/lib/active_support/notifications.rb:55:in `instrument'
 /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/actionpack-3.1.0/lib/action_view/template.rb:142:in `render'
 /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/actionpack-3.1.0/lib/action_view/renderer/template_renderer.rb:40:in `block (2 levels) in render_template'
 /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/actionpack-3.1.0/lib/action_view/renderer/abstract_renderer.rb:33:in `block in instrument'
 /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/activesupport-3.1.0/lib/active_support/notifications.rb:53:in `block in instrument'
 /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/activesupport-3.1.0/lib/active_support/notifications/instrumenter.rb:21:in `instrument'
 /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/activesupport-3.1.0/lib/active_support/notifications.rb:53:in `instrument'
 /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gem install RMagick on Apple MacOS X Mountain Lion 10.8]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/08/18/gem-install-rmagick-on-apple-macos-x-mountain-lion-10-dot-8/"/>
    <updated>2012-08-18T20:14:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/08/18/gem-install-rmagick-on-apple-macos-x-mountain-lion-10-dot-8</id>
    <content type="html"><![CDATA[<p>最近升级了 Mountain Lion 10.8，结果发现使用 RMagick 的 Rails 项目无法正常启动，碉堡了！</p>

<p><code>``
blogbins-MacBook-Pro:xbmc blogbin$ rails server
:macosx
WARNING: Nokogiri was built against LibXML version 2.7.3, but has dynamically loaded 2.7.8
/Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/activesupport-3.1.0/lib/active_support/dependencies.rb:240:in</code>require': dlopen(/Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/rmagick-2.13.1/lib/RMagick2.bundle, 9): Library not loaded: /usr/lib/libltdl.7.dylib (LoadError)
  Referenced from: /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/rmagick-2.13.1/lib/RMagick2.bundle
  Reason: Incompatible library version: RMagick2.bundle requires version 10.0.0 or later, but libltdl.7.dylib provides version 5.0.0 - /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/rmagick-2.13.1/lib/RMagick2.bundle</p>

<pre><code> from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/activesupport-3.1.0/lib/active_support/dependencies.rb:240:in `block in require'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/activesupport-3.1.0/lib/active_support/dependencies.rb:223:in `block in load_dependency'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/activesupport-3.1.0/lib/active_support/dependencies.rb:640:in `new_constants_in'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/activesupport-3.1.0/lib/active_support/dependencies.rb:223:in `load_dependency'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/activesupport-3.1.0/lib/active_support/dependencies.rb:240:in `require'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/rmagick-2.13.1/lib/rmagick.rb:11:in `&lt;top (required)&gt;'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/bundler-1.1.3/lib/bundler/runtime.rb:68:in `require'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/bundler-1.1.3/lib/bundler/runtime.rb:68:in `block (2 levels) in require'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/bundler-1.1.3/lib/bundler/runtime.rb:66:in `each'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/bundler-1.1.3/lib/bundler/runtime.rb:66:in `block in require'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/bundler-1.1.3/lib/bundler/runtime.rb:55:in `each'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/bundler-1.1.3/lib/bundler/runtime.rb:55:in `require'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/bundler-1.1.3/lib/bundler.rb:119:in `require'
 from /Users/blogbin/projects/workspaces/app_store/ruby/xbmc/config/application.rb:7:in `&lt;top (required)&gt;'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/railties-3.1.0/lib/rails/commands.rb:52:in `require'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/railties-3.1.0/lib/rails/commands.rb:52:in `block in &lt;top (required)&gt;'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/railties-3.1.0/lib/rails/commands.rb:49:in `tap'
 from /Users/blogbin/.rvm/gems/ruby-1.9.3-p0@appstore/gems/railties-3.1.0/lib/rails/commands.rb:49:in `&lt;top (required)&gt;'
 from script/rails:6:in `require'
 from script/rails:6:in `&lt;main&gt;
</code></pre>

<p>```</p>

<p>Google 搜索了不少帖子，大部分都只是解决一部分问题，又冒出新的问题
最后终于找到一篇介绍完整的解决的办法。</p>

<p><a href="http://coderwall.com/p/njrnzq">http://coderwall.com/p/njrnzq</a></p>

<!--more-->


<p>{% blockquote %}
Managed to fix it following these steps:</p>

<p>Installed XCode 4.4 and Command Line Tools
Ran this in terminal:</p>

<p>sudo chown -R <user> /usr/local
brew update
brew tap homebrew/dupes
brew install apple-gcc42</p>

<p>Installed XQuartz 2.7.2 (http://xquartz.macosforge.org/landing)</p>

<p>Fixed any errors reported by brew doctor
Ran this in terminal:</p>

<p>gem uninstall rmagick
brew uninstall imagemagick
brew install --fresh imagemagick
gem install rmagick</p>

<p>After this, RMagick worked flawlessly again!
{% endblockquote %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby元编程 - 逸光 - 我信仰超越光的不是物质，是思维]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/08/17/metaprogramming-ruby/"/>
    <updated>2012-08-17T09:36:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/08/17/metaprogramming-ruby</id>
    <content type="html"><![CDATA[<p>参阅：
逸光 <a href="http://deathking.is-programmer.com/">http://deathking.is-programmer.com//</a></p>

<p>Ruby元编程 - 逸光 - 我信仰超越光的不是物质，是思维 <a href="http://deathking.is-programmer.com/posts/28864.html">http://deathking.is-programmer.com/posts/28864.html</a></p>

<h5>1. 慎用 eval</h5>

<p>{% blockquote %}
一般来说，能避免 eval 就尽量避免，因为 eval 有额外的“分析时”开销（将字符串作为源代码进行词法、文法分析），而这个“剖析时”却又是在程序“运行时”进行的。把不需要惰性求值的表达式预先进行及早求值，能避免一些分析时开销。如果可能的话，用 instance_exec，或 instance_eval 带块的形式，也比直接在字符串上求值好。
{% endblockquote %}</p>

<!--more-->


<h5>2. 一句话明了 class_eval 的区别</h5>

<p>{% blockquote %}
当作用于类时，class_eval将会定义实例方法，而instance_eval定义类方法。
{% endblockquote %}</p>

<h5>3. class_variables 操作的是类变量，而非类实例变量</h5>

<p>{% blockquote %}
1.3.9 class_variables
　　如果你想知道一个类中有哪些类变量，我们可以使用class_varibles方法。他返回一个数组（Array），以符号（Symbol）的形式返回类变量的名称。
```
classRubyist
  @@geek="Ruby's Matz"
  @@country="USA"
end</p>

<p>classChild &lt; Rubyist
  @@city="Nashville"
end
print Rubyist.class_variables# => [:@@geek, :@@country]
puts
p Child.class_variables# => [:@@city]
```
　　你可以从程序的输出中观察到Child.class_variables输出的是在Child类中定义的类变量（@@city）。Child类没有从父类中继承类变量（@@geek, @@country）。
{% endblockquote %}</p>

<h5>4. 常量操作 const_get 和 const_set</h5>

<p>{% blockquote %}
1.3.11 const_get, const_set</p>

<p>　　类似的，const_get和const_set用于操作常量。const_get返回指定常量的值：</p>

<p><code>ruby
puts Float.const_get(:MIN) # =&gt; 2.2250738585072e-308
</code>
　　const_set为指定的常量设置指定的值，并返回该对象。如果常量不存在，那么他会创建该常量，就是下面示范的那样：
``` ruby
class Rubyist</p>

<p>end
puts Rubyist.const_set("PI", 22.0/7.0) # => 3.14285714285714
```</p>

<p>　　因为const_get返回常量的值，因此，你可以使用此方法获得一个类的名字并为这个类添加一个新的实例化对象的方法。这样使得我们有能力在运行时创建类并实例化其实例。
``` ruby</p>

<h1>Let us call our new class 'Rubyist'</h1>

<h1>(we could have prompted the user for a class name)</h1>

<p>class_name = "rubyist".capitalize</p>

<p>Object.const_set(class_name, Class.new)</p>

<h1>Let us create a method 'who'</h1>

<h1>(we could have prompted the user for a method name)</h1>

<p>class_name = Object.const_get(class_name)</p>

<p>puts class_name # => Rubyist</p>

<p>class_name.class_eval do</p>

<p>  define_method :who do |my_arg|</p>

<pre><code>my_arg
</code></pre>

<p>  end
end
obj = class_name.new
puts obj.who('Matz') # => Matz
```
{% endblockquote %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hisea's Ruby和元编程的故事 - 第2回: 类与模块，Ruby的绝代双骄]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/08/16/a-story-about-ruby-and-metaprogramming-ruby-2/"/>
    <updated>2012-08-16T16:22:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/08/16/a-story-about-ruby-and-metaprogramming-ruby-2</id>
    <content type="html"><![CDATA[<p>参阅：
Hisea <a href="http://hisea.me/">http://hisea.me/</a></p>

<p>Ruby和元编程的故事 - 第2回: 类与模块，Ruby的绝代双骄 <a href="http://ruby-china.org/topics/1581">http://ruby-china.org/topics/1581</a></p>

<h5>1. 注意向已有的常量再次赋值很容易引起错误，所以 Ruby 语言会自动警告提示该情况</h5>

<p>有很多名字，比如单例类，估计是因为 eigenclass 本体类很容易就解决设计模式的单例，结果就误传下来了。</p>

<p>{% blockquote %}
实际上，如果已经存在一个同名常量，Ruby会重新使用那个常量,如果常量不是class就会报错>> Test = 2
``` ruby
=> 2</p>

<blockquote><blockquote><p>class Test
end
TypeError: Test is not a class
from (irb):2
```
{% endblockquote %}</p></blockquote></blockquote>

<!--more-->


<h5>2. Module 的模块方法可以直接被调用</h5>

<p>{% blockquote %}
module的方法有两种，一种是module方法，这类方法可以直接调用。
``` ruby</p>

<blockquote><blockquote><p>module Test
  def Test.test_method</p>

<pre><code>puts "hello from module"
</code></pre>

<p>  end
end
=> nil
Test::test_method
hello from module
=> nil
```
{% endblockquote %}</p></blockquote></blockquote>
]]></content>
  </entry>
  
</feed>
