<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: binarylogic | Tech.Blogbin's Blog]]></title>
  <link href="http://tech-blog.blogbin.info/blog/categories/binarylogic/atom.xml" rel="self"/>
  <link href="http://tech-blog.blogbin.info/"/>
  <updated>2012-09-16T09:07:56+08:00</updated>
  <id>http://tech-blog.blogbin.info/</id>
  <author>
    <name><![CDATA[Tech Blogbin ]]></name>
    <email><![CDATA[Tech Blogbin <tech.blogbin@gmail.com>]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using jcftang's octopress-relatedposts]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/08/25/using-jcftangs-octopress-relatedposts/"/>
    <updated>2012-08-25T08:33:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/08/25/using-jcftangs-octopress-relatedposts</id>
    <content type="html"><![CDATA[<p>参阅 jcftang/octopress-relatedposts <a href="https://github.com/jcftang/octopress-relatedposts">https://github.com/jcftang/octopress-relatedposts</a></p>

<p>其实 Octopress 已经内置了 LSI 引擎，安装和配置 octopress-relatedposts 比较简单。</p>

<p><blockquote><p>Firstly add this to your _config.yml file</p></p><p><p>lsi: true<br/>The create a file such as source/_includes/custom/asides/related.html with the following content</p></p><p><p>....</p></p><p><p>It is possible to style the list, but in the above I have chosen to keep the same style as the recent posts.</p></p><p><p>Finally, add the file to your default asides list in your _config.yml file</p></p><p><p>default_asides: [custom/asides/related.html, ...]</p></blockquote></p>

<!--more-->


<p>相关帖子效果如下图：
<blockquote><p><img src="/images/2012-08-25-using-jcftangs-octopress-relatedposts/octopress-relatedposts.jpeg"></p></blockquote></p>

<p>引入   source/_includes/custom/asides/related.html
比较遗憾的时，启用 LSI 后，运行 rake generate 的时间延长了 10 倍左右。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using binarylogic/settingslogic]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/08/22/using-binarylogic-slash-settingslogic/"/>
    <updated>2012-08-22T22:00:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/08/22/using-binarylogic-slash-settingslogic</id>
    <content type="html"><![CDATA[<p>Rails 项目中有一些全局配置信息需要保存在文件中，采用 binarylogic/settingslogic 来管理这些配置信息：</p>

<p>参阅：</p>

<p>binarylogic/settingslogic <a href="https://github.com/binarylogic/settingslogic">https://github.com/binarylogic/settingslogic</a></p>

<p>介紹 Settingslogic | Beryllium Work <a href="http://blog.berylliumwork.com/2012/02/settingslogic.html">http://blog.berylliumwork.com/2012/02/settingslogic.html</a></p>

<p>假设 config 有配置文件：
``` ruby settings.yml
default: *default
  server_url:</p>

<pre><code>check_sensitive_data: "http://localhst:3000/bad_word_checker/check.json"
</code></pre>

<p>development:
  &lt;&lt;: *default
  server_url:</p>

<pre><code>check_sensitive_data: "http://localhst:3001/bad_word_checker/check.json" 
</code></pre>

<p>test:
  &lt;&lt;: *default
  server_url:</p>

<pre><code>check_sensitive_data: "http://localhst:3002/bad_word_checker/check.json" 
</code></pre>

<p>production:
  &lt;&lt;: *default
  server_url:</p>

<pre><code>check_sensitive_data: "http://localhst:3003/bad_word_checker/check.json" 
</code></pre>

<p>```</p>

<!--more-->


<p>访问配置信息的代码比较丑陋，如
``` ruby settings.rb
SYS_CONFIG = YAML.load_file(Rails.root.join("config/sys_config.yml"))[Rails.env]</p>

<p>puts SYS_CONFIG["server_url"]["check_sensitive_data"]     # => "http://localhst:3001/bad_word_checker/check.json"
```</p>

<p>如果采用 settingslogic，先创建 settings.rb 文件
``` ruby app/model/settings.rb</p>

<h1>encoding: UTF-8</h1>

<h1>binarylogic/settingslogic</h1>

<h1>https://github.com/binarylogic/settingslogic</h1>

<p>class Settings &lt; Settingslogic
  source "#{Rails.root}/config/settings.yml"
  namespace Rails.env
end
```</p>

<p>通过 Settings 来访问配置信息，如：
<code>ruby
puts Settings.server_url.check_sensitive_data    # =&gt; "http://localhst:3001/bad_word_checker/check.json"
</code></p>

<p>看看，不需要指定 yml 文件和 env 环境，非常容易。</p>
]]></content>
  </entry>
  
</feed>
