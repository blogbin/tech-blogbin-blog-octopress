<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Redmine | Tech.Blogbin's Blog]]></title>
  <link href="http://tech-blog.blogbin.info/blog/categories/redmine/atom.xml" rel="self"/>
  <link href="http://tech-blog.blogbin.info/"/>
  <updated>2012-09-19T21:47:19+08:00</updated>
  <id>http://tech-blog.blogbin.info/</id>
  <author>
    <name><![CDATA[Tech Blogbin ]]></name>
    <email><![CDATA[Tech Blogbin <tech.blogbin@gmail.com>]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redmine 改进：新建问题发送邮件中显示完成时间和上传的附件信息]]></title>
    <link href="http://tech-blog.blogbin.info/blog/2012/08/15/displaying-attachments-and-due-date-within-email-when-a-issue-is-created/"/>
    <updated>2012-08-15T23:44:00+08:00</updated>
    <id>http://tech-blog.blogbin.info/blog/2012/08/15/displaying-attachments-and-due-date-within-email-when-a-issue-is-created</id>
    <content type="html"><![CDATA[<p>Redmine <a href="http://www.redmine.org/">http://www.redmine.org/</a> 的确是一款优秀的任务跟踪管理系统，是开源免费，而且是基于 RubyOnRails 来开发的 Web 系统，代码具有很强的学习的价值。</p>

<p>很奇怪为何新建问题，系统自动发送的邮件没有显示要求完成时间和附件信息，而更新问题时发送的邮件却有两者信息。</p>

<p>阅读代码后发现，Redmine 负责渲染新建问题自动发送的邮件的地方，没有显示要求完成时间和附件信息。</p>

<p>要求完成时间比较好好处理，直接从 @issue.due_date 获得；</p>

<p>但新建问题后，就触发 Observer 自动发邮件，此时上传过的附件还没保存入库，所以利用现有途径无法从 @issue 获得附件。</p>

<p>尝试好几种方案，均不成功。最后考虑给 Issue 模型加一个实例变量临时保存附件信息。</p>

<p>Redmine 版本基于 1.2.1</p>

<p>与邮件正文内容显示相关的关键代码在 show_detail.rb 的 show_detail() 方法：</p>

<p><a href="https://github.com/redmine/redmine/blob/master/app/helpers/issues_helper.rb">https://github.com/redmine/redmine/blob/master/app/helpers/issues_helper.rb</a></p>

<p>具体调整如下：</p>

<!--more-->


<h5>1. 打开 Issue 类，添加新的实例变量 original_attachments，用于临时保存刚上传的附件</h5>

<p>``` ruby
class Issue &lt; ActiveRecord::Base</p>

<p>  attr_accessor :original_attachments</p>

<p>end
```</p>

<h5>2. 修改 IssuesController#create 方法</h5>

<p>``` ruby issues_controller.rb
def create</p>

<pre><code>call_hook(:controller_issues_new_before_save, { :params =&gt; params, :issue =&gt; @issue })

# 对 @issue.original_attachments 进行赋值
@issue.original_attachments = params[:attachments]

if @issue.save

# ... 以下省略
</code></pre>

<p>  end
```</p>

<h5>3. 渲染邮件格式的地方补充显示要求完成时间和附件信息</h5>

<p>``` ruby issue_add_text_html.rhtml
&lt;%= l(:text_issue_added, :id => "##{@issue.id}", :author => h(@issue.author)) %></p>

<p>&lt;%
  # 显示完成时间信息
  if @issue.due_date
%></p>

<ul>
  <li><%= l(:text_journal_set_to, :label => l(:field_due_date), :value => format_date( @issue.due_date ) ) %> </li>
</ul>


<p>&lt;% end %></p>

<p>&lt;%
  # 显示附件信息
  attachments = @issue.original_attachments
  puts "attachments = #{attachments}"
  if attachments &amp;&amp; attachments.is_a?(Hash)
%></p>

<pre><code>&lt;ul&gt;
        &lt;%
        attachments.each_value do |attachment|
          file = attachment['file']
          next unless file &amp;&amp; file.size &gt; 0
        %&gt;
            &lt;li&gt;&lt;%= l(:text_journal_added, :label =&gt; l(:label_attachment), :value =&gt; file.original_filename ) %&gt; &lt;/li&gt;
    &lt;% end %&gt;
&lt;/ul&gt;
</code></pre>

<p>&lt;% end %></p>

<hr />


<p>&lt;%= render :partial => "issue_text_html", :locals => { :issue => @issue, :issue_url => @issue_url } %></p>

<p>```</p>

<h5>4. 最终效果如图</h5>

<p><blockquote><p><img src="/images/2012-08-15-displaying-attachments-and-due-date-within-email-when-a-issue-is-created/redmine_issue_add_email.png"></p></blockquote></p>
]]></content>
  </entry>
  
</feed>
